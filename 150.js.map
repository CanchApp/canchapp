{"version":3,"file":"150.js","mappings":"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","sources":["./node_modules/ngx-mask/fesm2022/ngx-mask.mjs","./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, inject, Injectable, ElementRef, Renderer2, makeEnvironmentProviders, input, output, signal, Directive, HostListener, Pipe } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';\n\nvar MaskExpression;\n(function (MaskExpression) {\n    MaskExpression[\"SEPARATOR\"] = \"separator\";\n    MaskExpression[\"PERCENT\"] = \"percent\";\n    MaskExpression[\"IP\"] = \"IP\";\n    MaskExpression[\"CPF_CNPJ\"] = \"CPF_CNPJ\";\n    MaskExpression[\"MONTH\"] = \"M\";\n    MaskExpression[\"MONTHS\"] = \"M0\";\n    MaskExpression[\"MINUTE\"] = \"m\";\n    MaskExpression[\"HOUR\"] = \"h\";\n    MaskExpression[\"HOURS\"] = \"H\";\n    MaskExpression[\"MINUTES\"] = \"m0\";\n    MaskExpression[\"HOURS_HOUR\"] = \"Hh\";\n    MaskExpression[\"SECONDS\"] = \"s0\";\n    MaskExpression[\"HOURS_MINUTES_SECONDS\"] = \"Hh:m0:s0\";\n    MaskExpression[\"EMAIL_MASK\"] = \"A*@A*.A*\";\n    MaskExpression[\"HOURS_MINUTES\"] = \"Hh:m0\";\n    MaskExpression[\"MINUTES_SECONDS\"] = \"m0:s0\";\n    MaskExpression[\"DAYS_MONTHS_YEARS\"] = \"d0/M0/0000\";\n    MaskExpression[\"DAYS_MONTHS\"] = \"d0/M0\";\n    MaskExpression[\"DAYS\"] = \"d0\";\n    MaskExpression[\"DAY\"] = \"d\";\n    MaskExpression[\"SECOND\"] = \"s\";\n    MaskExpression[\"LETTER_S\"] = \"S\";\n    MaskExpression[\"DOT\"] = \".\";\n    MaskExpression[\"COMMA\"] = \",\";\n    MaskExpression[\"CURLY_BRACKETS_LEFT\"] = \"{\";\n    MaskExpression[\"CURLY_BRACKETS_RIGHT\"] = \"}\";\n    MaskExpression[\"MINUS\"] = \"-\";\n    MaskExpression[\"OR\"] = \"||\";\n    MaskExpression[\"HASH\"] = \"#\";\n    MaskExpression[\"EMPTY_STRING\"] = \"\";\n    MaskExpression[\"SYMBOL_STAR\"] = \"*\";\n    MaskExpression[\"SYMBOL_QUESTION\"] = \"?\";\n    MaskExpression[\"SLASH\"] = \"/\";\n    MaskExpression[\"WHITE_SPACE\"] = \" \";\n    MaskExpression[\"NUMBER_ZERO\"] = \"0\";\n    MaskExpression[\"NUMBER_NINE\"] = \"9\";\n    MaskExpression[\"BACKSPACE\"] = \"Backspace\";\n    MaskExpression[\"DELETE\"] = \"Delete\";\n    MaskExpression[\"ARROW_LEFT\"] = \"ArrowLeft\";\n    MaskExpression[\"ARROW_UP\"] = \"ArrowUp\";\n    MaskExpression[\"DOUBLE_ZERO\"] = \"00\";\n})(MaskExpression || (MaskExpression = {}));\n\nconst NGX_MASK_CONFIG = new InjectionToken('ngx-mask config');\nconst NEW_CONFIG = new InjectionToken('new ngx-mask config');\nconst INITIAL_CONFIG = new InjectionToken('initial ngx-mask config');\nconst initialConfig = {\n    suffix: '',\n    prefix: '',\n    thousandSeparator: ' ',\n    decimalMarker: ['.', ','],\n    clearIfNotMatch: false,\n    showMaskTyped: false,\n    instantPrefix: false,\n    placeHolderCharacter: '_',\n    dropSpecialCharacters: true,\n    hiddenInput: false,\n    shownMaskExpression: '',\n    separatorLimit: '',\n    allowNegativeNumbers: false,\n    validation: true,\n    specialCharacters: ['-', '/', '(', ')', '.', ':', ' ', '+', ',', '@', '[', ']', '\"', \"'\"],\n    leadZeroDateTime: false,\n    apm: false,\n    leadZero: false,\n    keepCharacterPositions: false,\n    triggerOnMaskChange: false,\n    inputTransformFn: (value) => value,\n    outputTransformFn: (value) => value,\n    maskFilled: new EventEmitter(),\n    patterns: {\n        '0': {\n            pattern: new RegExp('\\\\d'),\n        },\n        '9': {\n            pattern: new RegExp('\\\\d'),\n            optional: true,\n        },\n        X: {\n            pattern: new RegExp('\\\\d'),\n            symbol: '*',\n        },\n        A: {\n            pattern: new RegExp('[a-zA-Z0-9]'),\n        },\n        S: {\n            pattern: new RegExp('[a-zA-Z]'),\n        },\n        U: {\n            pattern: new RegExp('[A-Z]'),\n        },\n        L: {\n            pattern: new RegExp('[a-z]'),\n        },\n        d: {\n            pattern: new RegExp('\\\\d'),\n        },\n        m: {\n            pattern: new RegExp('\\\\d'),\n        },\n        M: {\n            pattern: new RegExp('\\\\d'),\n        },\n        H: {\n            pattern: new RegExp('\\\\d'),\n        },\n        h: {\n            pattern: new RegExp('\\\\d'),\n        },\n        s: {\n            pattern: new RegExp('\\\\d'),\n        },\n    },\n};\nconst timeMasks = [\n    MaskExpression.HOURS_MINUTES_SECONDS,\n    MaskExpression.HOURS_MINUTES,\n    MaskExpression.MINUTES_SECONDS,\n];\nconst withoutValidation = [\n    MaskExpression.PERCENT,\n    MaskExpression.HOURS_HOUR,\n    MaskExpression.SECONDS,\n    MaskExpression.MINUTES,\n    MaskExpression.SEPARATOR,\n    MaskExpression.DAYS_MONTHS_YEARS,\n    MaskExpression.DAYS_MONTHS,\n    MaskExpression.DAYS,\n    MaskExpression.MONTHS,\n];\n\nclass NgxMaskApplierService {\n    _config = inject(NGX_MASK_CONFIG);\n    dropSpecialCharacters = this._config.dropSpecialCharacters;\n    hiddenInput = this._config.hiddenInput;\n    clearIfNotMatch = this._config.clearIfNotMatch;\n    specialCharacters = this._config.specialCharacters;\n    patterns = this._config.patterns;\n    prefix = this._config.prefix;\n    suffix = this._config.suffix;\n    thousandSeparator = this._config.thousandSeparator;\n    decimalMarker = this._config.decimalMarker;\n    customPattern;\n    showMaskTyped = this._config.showMaskTyped;\n    placeHolderCharacter = this._config.placeHolderCharacter;\n    validation = this._config.validation;\n    separatorLimit = this._config.separatorLimit;\n    allowNegativeNumbers = this._config.allowNegativeNumbers;\n    leadZeroDateTime = this._config.leadZeroDateTime;\n    leadZero = this._config.leadZero;\n    apm = this._config.apm;\n    inputTransformFn = this._config.inputTransformFn;\n    outputTransformFn = this._config.outputTransformFn;\n    keepCharacterPositions = this._config.keepCharacterPositions;\n    instantPrefix = this._config.instantPrefix;\n    _shift = new Set();\n    plusOnePosition = false;\n    maskExpression = '';\n    actualValue = '';\n    showKeepCharacterExp = '';\n    shownMaskExpression = '';\n    deletedSpecialCharacter = false;\n    ipError;\n    cpfCnpjError;\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, cb = () => { }) {\n        if (!maskExpression || typeof inputValue !== 'string') {\n            return MaskExpression.EMPTY_STRING;\n        }\n        let cursor = 0;\n        let result = '';\n        let multi = false;\n        let backspaceShift = false;\n        let shift = 1;\n        let stepBack = false;\n        let processedValue = inputValue;\n        let processedPosition = position;\n        if (processedValue.slice(0, this.prefix.length) === this.prefix) {\n            processedValue = processedValue.slice(this.prefix.length, processedValue.length);\n        }\n        if (!!this.suffix && processedValue.length > 0) {\n            processedValue = this.checkAndRemoveSuffix(processedValue);\n        }\n        if (processedValue === '(' && this.prefix) {\n            processedValue = '';\n        }\n        const inputArray = processedValue.toString().split(MaskExpression.EMPTY_STRING);\n        if (this.allowNegativeNumbers &&\n            processedValue.slice(cursor, cursor + 1) === MaskExpression.MINUS) {\n            result += processedValue.slice(cursor, cursor + 1);\n        }\n        if (maskExpression === MaskExpression.IP) {\n            const valuesIP = processedValue.split(MaskExpression.DOT);\n            this.ipError = this._validIP(valuesIP);\n            maskExpression = '099.099.099.099';\n        }\n        const arr = [];\n        for (let i = 0; i < processedValue.length; i++) {\n            if (processedValue[i]?.match('\\\\d')) {\n                arr.push(processedValue[i] ?? MaskExpression.EMPTY_STRING);\n            }\n        }\n        if (maskExpression === MaskExpression.CPF_CNPJ) {\n            this.cpfCnpjError = arr.length !== 11 && arr.length !== 14;\n            if (arr.length > 11) {\n                maskExpression = '00.000.000/0000-00';\n            }\n            else {\n                maskExpression = '000.000.000-00';\n            }\n        }\n        if (maskExpression.startsWith(MaskExpression.PERCENT)) {\n            if (processedValue.match('[a-z]|[A-Z]') ||\n                (processedValue.match(/[-!$%^&*()_+|~=`{}\\[\\]:\";'<>?,\\/.]/) && !backspaced)) {\n                processedValue = this._stripToDecimal(processedValue);\n                const precision = this.getPrecision(maskExpression);\n                processedValue = this.checkInputPrecision(processedValue, precision, this.decimalMarker);\n            }\n            const decimalMarker = typeof this.decimalMarker === 'string' ? this.decimalMarker : MaskExpression.DOT;\n            if (processedValue.indexOf(decimalMarker) > 0 &&\n                !this.percentage(processedValue.substring(0, processedValue.indexOf(decimalMarker)))) {\n                let base = processedValue.substring(0, processedValue.indexOf(decimalMarker) - 1);\n                if (this.allowNegativeNumbers &&\n                    processedValue.slice(cursor, cursor + 1) === MaskExpression.MINUS &&\n                    !backspaced) {\n                    base = processedValue.substring(0, processedValue.indexOf(decimalMarker));\n                }\n                processedValue = `${base}${processedValue.substring(processedValue.indexOf(decimalMarker), processedValue.length)}`;\n            }\n            let value = '';\n            this.allowNegativeNumbers &&\n                processedValue.slice(cursor, cursor + 1) === MaskExpression.MINUS\n                ? (value = `${MaskExpression.MINUS}${processedValue.slice(cursor + 1, cursor + processedValue.length)}`)\n                : (value = processedValue);\n            if (this.percentage(value)) {\n                result = this._splitPercentZero(processedValue);\n            }\n            else {\n                result = this._splitPercentZero(processedValue.substring(0, processedValue.length - 1));\n            }\n        }\n        else if (maskExpression.startsWith(MaskExpression.SEPARATOR)) {\n            if (processedValue.match('[wа-яА-Я]') ||\n                processedValue.match('[ЁёА-я]') ||\n                processedValue.match('[a-z]|[A-Z]') ||\n                processedValue.match(/[-@#!$%\\\\^&*()_£¬'+|~=`{}\\]:\";<>.?/]/) ||\n                processedValue.match('[^A-Za-z0-9,]')) {\n                processedValue = this._stripToDecimal(processedValue);\n            }\n            const precision = this.getPrecision(maskExpression);\n            let decimalMarker = this.decimalMarker;\n            if (Array.isArray(this.decimalMarker)) {\n                if (this.actualValue.includes(this.decimalMarker[0]) ||\n                    this.actualValue.includes(this.decimalMarker[1])) {\n                    decimalMarker = this.actualValue.includes(this.decimalMarker[0])\n                        ? this.decimalMarker[0]\n                        : this.decimalMarker[1];\n                }\n                else {\n                    decimalMarker = this.decimalMarker.find((dm) => dm !== this.thousandSeparator);\n                }\n            }\n            if (backspaced) {\n                const { decimalMarkerIndex, nonZeroIndex } = this._findFirstNonZeroAndDecimalIndex(processedValue, decimalMarker);\n                const zeroIndexMinus = processedValue[0] === MaskExpression.MINUS;\n                const zeroIndexNumberZero = processedValue[0] === MaskExpression.NUMBER_ZERO;\n                const zeroIndexDecimalMarker = processedValue[0] === decimalMarker;\n                const firstIndexDecimalMarker = processedValue[1] === decimalMarker;\n                if ((zeroIndexDecimalMarker && !nonZeroIndex) ||\n                    (zeroIndexMinus && firstIndexDecimalMarker && !nonZeroIndex) ||\n                    (zeroIndexNumberZero && !decimalMarkerIndex && !nonZeroIndex)) {\n                    processedValue = MaskExpression.NUMBER_ZERO;\n                }\n                if (decimalMarkerIndex &&\n                    nonZeroIndex &&\n                    zeroIndexMinus &&\n                    processedPosition === 1) {\n                    if (decimalMarkerIndex < nonZeroIndex || decimalMarkerIndex > nonZeroIndex) {\n                        processedValue = MaskExpression.MINUS + processedValue.slice(nonZeroIndex);\n                    }\n                }\n                if (!decimalMarkerIndex && nonZeroIndex && processedValue.length > nonZeroIndex) {\n                    processedValue = zeroIndexMinus\n                        ? MaskExpression.MINUS + processedValue.slice(nonZeroIndex)\n                        : processedValue.slice(nonZeroIndex);\n                }\n                if (decimalMarkerIndex && nonZeroIndex && processedPosition === 0) {\n                    if (decimalMarkerIndex < nonZeroIndex) {\n                        processedValue = processedValue.slice(decimalMarkerIndex - 1);\n                    }\n                    if (decimalMarkerIndex > nonZeroIndex) {\n                        processedValue = processedValue.slice(nonZeroIndex);\n                    }\n                }\n            }\n            if (precision === 0) {\n                processedValue = this.allowNegativeNumbers\n                    ? processedValue.length > 2 &&\n                        processedValue[0] === MaskExpression.MINUS &&\n                        processedValue[1] === MaskExpression.NUMBER_ZERO &&\n                        processedValue[2] !== this.thousandSeparator &&\n                        processedValue[2] !== MaskExpression.COMMA &&\n                        processedValue[2] !== MaskExpression.DOT\n                        ? '-' + processedValue.slice(2, processedValue.length)\n                        : processedValue[0] === MaskExpression.NUMBER_ZERO &&\n                            processedValue.length > 1 &&\n                            processedValue[1] !== this.thousandSeparator &&\n                            processedValue[1] !== MaskExpression.COMMA &&\n                            processedValue[1] !== MaskExpression.DOT\n                            ? processedValue.slice(1, processedValue.length)\n                            : processedValue\n                    : processedValue.length > 1 &&\n                        processedValue[0] === MaskExpression.NUMBER_ZERO &&\n                        processedValue[1] !== this.thousandSeparator &&\n                        processedValue[1] !== MaskExpression.COMMA &&\n                        processedValue[1] !== MaskExpression.DOT\n                        ? processedValue.slice(1, processedValue.length)\n                        : processedValue;\n            }\n            else {\n                if (processedValue[0] === decimalMarker &&\n                    processedValue.length > 1 &&\n                    !backspaced) {\n                    processedValue =\n                        MaskExpression.NUMBER_ZERO +\n                            processedValue.slice(0, processedValue.length + 1);\n                    this.plusOnePosition = true;\n                }\n                if (processedValue[0] === MaskExpression.NUMBER_ZERO &&\n                    processedValue[1] !== decimalMarker &&\n                    processedValue[1] !== this.thousandSeparator &&\n                    !backspaced) {\n                    processedValue =\n                        processedValue.length > 1\n                            ? processedValue.slice(0, 1) +\n                                decimalMarker +\n                                processedValue.slice(1, processedValue.length + 1)\n                            : processedValue;\n                    this.plusOnePosition = true;\n                }\n                if (this.allowNegativeNumbers &&\n                    !backspaced &&\n                    processedValue[0] === MaskExpression.MINUS &&\n                    (processedValue[1] === decimalMarker ||\n                        processedValue[1] === MaskExpression.NUMBER_ZERO)) {\n                    processedValue =\n                        processedValue[1] === decimalMarker && processedValue.length > 2\n                            ? processedValue.slice(0, 1) +\n                                MaskExpression.NUMBER_ZERO +\n                                processedValue.slice(1, processedValue.length)\n                            : processedValue[1] === MaskExpression.NUMBER_ZERO &&\n                                processedValue.length > 2 &&\n                                processedValue[2] !== decimalMarker\n                                ? processedValue.slice(0, 2) +\n                                    decimalMarker +\n                                    processedValue.slice(2, processedValue.length)\n                                : processedValue;\n                    this.plusOnePosition = true;\n                }\n            }\n            const thousandSeparatorCharEscaped = this._charToRegExpExpression(this.thousandSeparator);\n            let invalidChars = '@#!$%^&*()_+|~=`{}\\\\[\\\\]:\\\\s,\\\\.\";<>?\\\\/'.replace(thousandSeparatorCharEscaped, '');\n            if (Array.isArray(this.decimalMarker)) {\n                for (const marker of this.decimalMarker) {\n                    invalidChars = invalidChars.replace(this._charToRegExpExpression(marker), MaskExpression.EMPTY_STRING);\n                }\n            }\n            else {\n                invalidChars = invalidChars.replace(this._charToRegExpExpression(this.decimalMarker), '');\n            }\n            const invalidCharRegexp = new RegExp('[' + invalidChars + ']');\n            if (processedValue.match(invalidCharRegexp)) {\n                processedValue = processedValue.substring(0, processedValue.length - 1);\n            }\n            processedValue = this.checkInputPrecision(processedValue, precision, this.decimalMarker);\n            const strForSep = processedValue.replace(new RegExp(thousandSeparatorCharEscaped, 'g'), '');\n            result = this._formatWithSeparators(strForSep, this.thousandSeparator, this.decimalMarker, precision);\n            const commaShift = result.indexOf(MaskExpression.COMMA) - processedValue.indexOf(MaskExpression.COMMA);\n            const shiftStep = result.length - processedValue.length;\n            const backspacedDecimalMarkerWithSeparatorLimit = backspaced && result.length < inputValue.length && this.separatorLimit;\n            if ((result[processedPosition - 1] === this.thousandSeparator ||\n                result[processedPosition - this.prefix.length]) &&\n                this.prefix &&\n                backspaced) {\n                processedPosition = processedPosition - 1;\n            }\n            else if ((shiftStep > 0 && result[processedPosition] !== this.thousandSeparator) ||\n                backspacedDecimalMarkerWithSeparatorLimit) {\n                backspaceShift = true;\n                let _shift = 0;\n                do {\n                    this._shift.add(processedPosition + _shift);\n                    _shift++;\n                } while (_shift < shiftStep);\n            }\n            else if (result[processedPosition - 1] === this.thousandSeparator ||\n                shiftStep === -4 ||\n                shiftStep === -3 ||\n                result[processedPosition] === this.thousandSeparator) {\n                this._shift.clear();\n                this._shift.add(processedPosition - 1);\n            }\n            else if ((commaShift !== 0 &&\n                processedPosition > 0 &&\n                !(result.indexOf(MaskExpression.COMMA) >= processedPosition &&\n                    processedPosition > 3)) ||\n                (!(result.indexOf(MaskExpression.DOT) >= processedPosition && processedPosition > 3) &&\n                    shiftStep <= 0)) {\n                this._shift.clear();\n                backspaceShift = true;\n                shift = shiftStep;\n                processedPosition += shiftStep;\n                this._shift.add(processedPosition);\n            }\n            else {\n                this._shift.clear();\n            }\n        }\n        else {\n            for (let i = 0, inputSymbol = inputArray[0]; i < inputArray.length; i++, inputSymbol = inputArray[i] ?? MaskExpression.EMPTY_STRING) {\n                if (cursor === maskExpression.length) {\n                    break;\n                }\n                const symbolStarInPattern = MaskExpression.SYMBOL_STAR in this.patterns;\n                if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? MaskExpression.EMPTY_STRING) &&\n                    maskExpression[cursor + 1] === MaskExpression.SYMBOL_QUESTION) {\n                    result += inputSymbol;\n                    cursor += 2;\n                }\n                else if (maskExpression[cursor + 1] === MaskExpression.SYMBOL_STAR &&\n                    multi &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? MaskExpression.EMPTY_STRING)) {\n                    result += inputSymbol;\n                    cursor += 3;\n                    multi = false;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? MaskExpression.EMPTY_STRING) &&\n                    maskExpression[cursor + 1] === MaskExpression.SYMBOL_STAR &&\n                    !symbolStarInPattern) {\n                    result += inputSymbol;\n                    multi = true;\n                }\n                else if (maskExpression[cursor + 1] === MaskExpression.SYMBOL_QUESTION &&\n                    this._checkSymbolMask(inputSymbol, maskExpression[cursor + 2] ?? MaskExpression.EMPTY_STRING)) {\n                    result += inputSymbol;\n                    cursor += 3;\n                }\n                else if (this._checkSymbolMask(inputSymbol, maskExpression[cursor] ?? MaskExpression.EMPTY_STRING)) {\n                    if (maskExpression[cursor] === MaskExpression.HOURS) {\n                        if (this.apm ? Number(inputSymbol) > 9 : Number(inputSymbol) > 2) {\n                            processedPosition = !this.leadZeroDateTime\n                                ? processedPosition + 1\n                                : processedPosition;\n                            cursor += 1;\n                            this._shiftStep(cursor);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === MaskExpression.HOUR) {\n                        if (this.apm\n                            ? (result.length === 1 && Number(result) > 1) ||\n                                (result === '1' && Number(inputSymbol) > 2) ||\n                                (processedValue.slice(cursor - 1, cursor).length === 1 &&\n                                    Number(processedValue.slice(cursor - 1, cursor)) > 2) ||\n                                (processedValue.slice(cursor - 1, cursor) === '1' &&\n                                    Number(inputSymbol) > 2)\n                            : (result === '2' && Number(inputSymbol) > 3) ||\n                                ((result.slice(cursor - 2, cursor) === '2' ||\n                                    result.slice(cursor - 3, cursor) === '2' ||\n                                    result.slice(cursor - 4, cursor) === '2' ||\n                                    result.slice(cursor - 1, cursor) === '2') &&\n                                    Number(inputSymbol) > 3 &&\n                                    cursor > 10)) {\n                            processedPosition = processedPosition + 1;\n                            cursor += 1;\n                            i--;\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === MaskExpression.MINUTE ||\n                        maskExpression[cursor] === MaskExpression.SECOND) {\n                        if (Number(inputSymbol) > 5) {\n                            processedPosition = !this.leadZeroDateTime\n                                ? processedPosition + 1\n                                : processedPosition;\n                            cursor += 1;\n                            this._shiftStep(cursor);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    const daysCount = 31;\n                    const inputValueCursor = processedValue[cursor];\n                    const inputValueCursorPlusOne = processedValue[cursor + 1];\n                    const inputValueCursorPlusTwo = processedValue[cursor + 2];\n                    const inputValueCursorMinusOne = processedValue[cursor - 1];\n                    const inputValueCursorMinusTwo = processedValue[cursor - 2];\n                    const inputValueSliceMinusThreeMinusOne = processedValue.slice(cursor - 3, cursor - 1);\n                    const inputValueSliceMinusOnePlusOne = processedValue.slice(cursor - 1, cursor + 1);\n                    const inputValueSliceCursorPlusTwo = processedValue.slice(cursor, cursor + 2);\n                    const inputValueSliceMinusTwoCursor = processedValue.slice(cursor - 2, cursor);\n                    if (maskExpression[cursor] === MaskExpression.DAY) {\n                        const maskStartWithMonth = maskExpression.slice(0, 2) === MaskExpression.MONTHS;\n                        const startWithMonthInput = maskExpression.slice(0, 2) === MaskExpression.MONTHS &&\n                            this.specialCharacters.includes(inputValueCursorMinusTwo);\n                        if ((Number(inputSymbol) > 3 && this.leadZeroDateTime) ||\n                            (!maskStartWithMonth &&\n                                (Number(inputValueSliceCursorPlusTwo) > daysCount ||\n                                    Number(inputValueSliceMinusOnePlusOne) > daysCount ||\n                                    this.specialCharacters.includes(inputValueCursorPlusOne))) ||\n                            (startWithMonthInput\n                                ? Number(inputValueSliceMinusOnePlusOne) > daysCount ||\n                                    (!this.specialCharacters.includes(inputValueCursor) &&\n                                        this.specialCharacters.includes(inputValueCursorPlusTwo)) ||\n                                    this.specialCharacters.includes(inputValueCursor)\n                                : Number(inputValueSliceCursorPlusTwo) > daysCount ||\n                                    (this.specialCharacters.includes(inputValueCursorPlusOne) &&\n                                        !backspaced))) {\n                            processedPosition = !this.leadZeroDateTime\n                                ? processedPosition + 1\n                                : processedPosition;\n                            cursor += 1;\n                            this._shiftStep(cursor);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    if (maskExpression[cursor] === MaskExpression.MONTH) {\n                        const monthsCount = 12;\n                        const withoutDays = cursor === 0 &&\n                            (Number(inputSymbol) > 2 ||\n                                Number(inputValueSliceCursorPlusTwo) > monthsCount ||\n                                (this.specialCharacters.includes(inputValueCursorPlusOne) &&\n                                    !backspaced));\n                        const specialChart = maskExpression.slice(cursor + 2, cursor + 3);\n                        const day1monthInput = inputValueSliceMinusThreeMinusOne.includes(specialChart) &&\n                            maskExpression.includes('d0') &&\n                            ((this.specialCharacters.includes(inputValueCursorMinusTwo) &&\n                                Number(inputValueSliceMinusOnePlusOne) > monthsCount &&\n                                !this.specialCharacters.includes(inputValueCursor)) ||\n                                this.specialCharacters.includes(inputValueCursor));\n                        const day2monthInput = Number(inputValueSliceMinusThreeMinusOne) <= daysCount &&\n                            !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) &&\n                            this.specialCharacters.includes(inputValueCursorMinusOne) &&\n                            (Number(inputValueSliceCursorPlusTwo) > monthsCount ||\n                                this.specialCharacters.includes(inputValueCursorPlusOne));\n                        const day2monthInputDot = (Number(inputValueSliceCursorPlusTwo) > monthsCount && cursor === 5) ||\n                            (this.specialCharacters.includes(inputValueCursorPlusOne) &&\n                                cursor === 5);\n                        const day1monthPaste = Number(inputValueSliceMinusThreeMinusOne) > daysCount &&\n                            !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) &&\n                            !this.specialCharacters.includes(inputValueSliceMinusTwoCursor) &&\n                            Number(inputValueSliceMinusTwoCursor) > monthsCount &&\n                            maskExpression.includes('d0');\n                        const day2monthPaste = Number(inputValueSliceMinusThreeMinusOne) <= daysCount &&\n                            !this.specialCharacters.includes(inputValueSliceMinusThreeMinusOne) &&\n                            !this.specialCharacters.includes(inputValueCursorMinusOne) &&\n                            Number(inputValueSliceMinusOnePlusOne) > monthsCount;\n                        if ((Number(inputSymbol) > 1 && this.leadZeroDateTime) ||\n                            withoutDays ||\n                            day1monthInput ||\n                            day2monthPaste ||\n                            day1monthPaste ||\n                            day2monthInput ||\n                            (day2monthInputDot && !this.leadZeroDateTime)) {\n                            processedPosition = !this.leadZeroDateTime\n                                ? processedPosition + 1\n                                : processedPosition;\n                            cursor += 1;\n                            this._shiftStep(cursor);\n                            i--;\n                            if (this.leadZeroDateTime) {\n                                result += '0';\n                            }\n                            continue;\n                        }\n                    }\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (this.specialCharacters.includes(inputSymbol) &&\n                    maskExpression[cursor] === inputSymbol) {\n                    result += inputSymbol;\n                    cursor++;\n                }\n                else if (this.specialCharacters.indexOf(maskExpression[cursor] ?? MaskExpression.EMPTY_STRING) !== -1) {\n                    result += maskExpression[cursor];\n                    cursor++;\n                    this._shiftStep(cursor);\n                    i--;\n                }\n                else if (maskExpression[cursor] === MaskExpression.NUMBER_NINE &&\n                    this.showMaskTyped) {\n                    this._shiftStep(cursor);\n                }\n                else if (this.patterns[maskExpression[cursor] ?? MaskExpression.EMPTY_STRING] &&\n                    this.patterns[maskExpression[cursor] ?? MaskExpression.EMPTY_STRING]?.optional) {\n                    if (!!inputArray[cursor] &&\n                        maskExpression !== '099.099.099.099' &&\n                        maskExpression !== '000.000.000-00' &&\n                        maskExpression !== '00.000.000/0000-00' &&\n                        !maskExpression.match(/^9+\\.0+$/) &&\n                        !this.patterns[maskExpression[cursor] ?? MaskExpression.EMPTY_STRING]\n                            ?.optional) {\n                        result += inputArray[cursor];\n                    }\n                    if (maskExpression.includes(MaskExpression.NUMBER_NINE + MaskExpression.SYMBOL_STAR) &&\n                        maskExpression.includes(MaskExpression.NUMBER_ZERO + MaskExpression.SYMBOL_STAR)) {\n                        cursor++;\n                    }\n                    cursor++;\n                    i--;\n                }\n                else if (this.maskExpression[cursor + 1] === MaskExpression.SYMBOL_STAR &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2] ?? MaskExpression.EMPTY_STRING) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.maskExpression[cursor + 1] === MaskExpression.SYMBOL_QUESTION &&\n                    this._findSpecialChar(this.maskExpression[cursor + 2] ?? MaskExpression.EMPTY_STRING) &&\n                    this._findSpecialChar(inputSymbol) === this.maskExpression[cursor + 2] &&\n                    multi) {\n                    cursor += 3;\n                    result += inputSymbol;\n                }\n                else if (this.showMaskTyped &&\n                    this.specialCharacters.indexOf(inputSymbol) < 0 &&\n                    inputSymbol !== this.placeHolderCharacter &&\n                    this.placeHolderCharacter.length === 1) {\n                    stepBack = true;\n                }\n            }\n        }\n        if (result[processedPosition - 1] &&\n            result.length + 1 === maskExpression.length &&\n            this.specialCharacters.indexOf(maskExpression[maskExpression.length - 1] ?? MaskExpression.EMPTY_STRING) !== -1) {\n            result += maskExpression[maskExpression.length - 1];\n        }\n        let newPosition = processedPosition + 1;\n        while (this._shift.has(newPosition)) {\n            shift++;\n            newPosition++;\n        }\n        let actualShift = justPasted && !maskExpression.startsWith(MaskExpression.SEPARATOR)\n            ? cursor\n            : this._shift.has(processedPosition)\n                ? shift\n                : 0;\n        if (stepBack) {\n            actualShift--;\n        }\n        cb(actualShift, backspaceShift);\n        if (shift < 0) {\n            this._shift.clear();\n        }\n        let onlySpecial = false;\n        if (backspaced) {\n            onlySpecial = inputArray.every((char) => this.specialCharacters.includes(char));\n        }\n        let res = `${this.prefix}${onlySpecial ? MaskExpression.EMPTY_STRING : result}${this.showMaskTyped ? '' : this.suffix}`;\n        if (result.length === 0) {\n            res = this.instantPrefix ? `${this.prefix}${result}` : `${result}`;\n        }\n        const isSpecialCharacterMaskFirstSymbol = processedValue.length === 1 &&\n            this.specialCharacters.includes(maskExpression[0]) &&\n            processedValue !== maskExpression[0];\n        if (!this._checkSymbolMask(processedValue, maskExpression[1]) &&\n            isSpecialCharacterMaskFirstSymbol) {\n            return '';\n        }\n        if (result.includes(MaskExpression.MINUS) && this.prefix && this.allowNegativeNumbers) {\n            if (backspaced && result === MaskExpression.MINUS) {\n                return '';\n            }\n            res = `${MaskExpression.MINUS}${this.prefix}${result\n                .split(MaskExpression.MINUS)\n                .join(MaskExpression.EMPTY_STRING)}${this.suffix}`;\n        }\n        return res;\n    }\n    _findDropSpecialChar(inputSymbol) {\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            return this.dropSpecialCharacters.find((val) => val === inputSymbol);\n        }\n        return this._findSpecialChar(inputSymbol);\n    }\n    _findSpecialChar(inputSymbol) {\n        return this.specialCharacters.find((val) => val === inputSymbol);\n    }\n    _checkSymbolMask(inputSymbol, maskSymbol) {\n        this.patterns = this.customPattern ? this.customPattern : this.patterns;\n        return ((this.patterns[maskSymbol]?.pattern &&\n            this.patterns[maskSymbol]?.pattern.test(inputSymbol)) ??\n            false);\n    }\n    _formatWithSeparators = (str, thousandSeparatorChar, decimalChars, precision) => {\n        let x = [];\n        let decimalChar = '';\n        if (Array.isArray(decimalChars)) {\n            const regExp = new RegExp(decimalChars.map((v) => ('[\\\\^$.|?*+()'.indexOf(v) >= 0 ? `\\\\${v}` : v)).join('|'));\n            x = str.split(regExp);\n            decimalChar = str.match(regExp)?.[0] ?? MaskExpression.EMPTY_STRING;\n        }\n        else {\n            x = str.split(decimalChars);\n            decimalChar = decimalChars;\n        }\n        const decimals = x.length > 1 ? `${decimalChar}${x[1]}` : MaskExpression.EMPTY_STRING;\n        let res = x[0] ?? MaskExpression.EMPTY_STRING;\n        const separatorLimit = this.separatorLimit.replace(/\\s/g, MaskExpression.EMPTY_STRING);\n        if (separatorLimit && +separatorLimit) {\n            if (res[0] === MaskExpression.MINUS) {\n                res = `-${res.slice(1, res.length).slice(0, separatorLimit.length)}`;\n            }\n            else {\n                res = res.slice(0, separatorLimit.length);\n            }\n        }\n        const rgx = /(\\d+)(\\d{3})/;\n        while (thousandSeparatorChar && rgx.test(res)) {\n            res = res.replace(rgx, '$1' + thousandSeparatorChar + '$2');\n        }\n        if (typeof precision === 'undefined') {\n            return res + decimals;\n        }\n        else if (precision === 0) {\n            return res;\n        }\n        return res + decimals.substring(0, precision + 1);\n    };\n    percentage = (str) => {\n        const sanitizedStr = str.replace(',', '.');\n        const value = Number(this.allowNegativeNumbers && str.includes(MaskExpression.MINUS)\n            ? sanitizedStr.slice(1, str.length)\n            : sanitizedStr);\n        return !isNaN(value) && value >= 0 && value <= 100;\n    };\n    getPrecision = (maskExpression) => {\n        const x = maskExpression.split(MaskExpression.DOT);\n        if (x.length > 1) {\n            return Number(x[x.length - 1]);\n        }\n        return Infinity;\n    };\n    checkAndRemoveSuffix = (inputValue) => {\n        for (let i = this.suffix?.length - 1; i >= 0; i--) {\n            const substr = this.suffix.substring(i, this.suffix?.length);\n            if (inputValue.includes(substr) &&\n                i !== this.suffix?.length - 1 &&\n                (i - 1 < 0 ||\n                    !inputValue.includes(this.suffix.substring(i - 1, this.suffix?.length)))) {\n                return inputValue.replace(substr, MaskExpression.EMPTY_STRING);\n            }\n        }\n        return inputValue;\n    };\n    checkInputPrecision = (inputValue, precision, decimalMarker) => {\n        let processedInputValue = inputValue;\n        let processedDecimalMarker = decimalMarker;\n        if (precision < Infinity) {\n            if (Array.isArray(processedDecimalMarker)) {\n                const marker = processedDecimalMarker.find((dm) => dm !== this.thousandSeparator);\n                processedDecimalMarker = marker ? marker : processedDecimalMarker[0];\n            }\n            const precisionRegEx = new RegExp(this._charToRegExpExpression(processedDecimalMarker) + `\\\\d{${precision}}.*$`);\n            const precisionMatch = processedInputValue.match(precisionRegEx);\n            const precisionMatchLength = (precisionMatch && precisionMatch[0]?.length) ?? 0;\n            if (precisionMatchLength - 1 > precision) {\n                const diff = precisionMatchLength - 1 - precision;\n                processedInputValue = processedInputValue.substring(0, processedInputValue.length - diff);\n            }\n            if (precision === 0 &&\n                this._compareOrIncludes(processedInputValue[processedInputValue.length - 1], processedDecimalMarker, this.thousandSeparator)) {\n                processedInputValue = processedInputValue.substring(0, processedInputValue.length - 1);\n            }\n        }\n        return processedInputValue;\n    };\n    _stripToDecimal(str) {\n        return str\n            .split(MaskExpression.EMPTY_STRING)\n            .filter((i, idx) => {\n            const isDecimalMarker = typeof this.decimalMarker === 'string'\n                ? i === this.decimalMarker\n                :\n                    this.decimalMarker.includes(i);\n            return (i.match('^-?\\\\d') ||\n                i === this.thousandSeparator ||\n                isDecimalMarker ||\n                (i === MaskExpression.MINUS && idx === 0 && this.allowNegativeNumbers));\n        })\n            .join(MaskExpression.EMPTY_STRING);\n    }\n    _charToRegExpExpression(char) {\n        if (char) {\n            const charsToEscape = '[\\\\^$.|?*+()';\n            return char === ' ' ? '\\\\s' : charsToEscape.indexOf(char) >= 0 ? `\\\\${char}` : char;\n        }\n        return char;\n    }\n    _shiftStep(cursor) {\n        this._shift.add(cursor + this.prefix.length || 0);\n    }\n    _compareOrIncludes(value, comparedValue, excludedValue) {\n        return Array.isArray(comparedValue)\n            ? comparedValue.filter((v) => v !== excludedValue).includes(value)\n            : value === comparedValue;\n    }\n    _validIP(valuesIP) {\n        return !(valuesIP.length === 4 &&\n            !valuesIP.some((value, index) => {\n                if (valuesIP.length !== index + 1) {\n                    return value === MaskExpression.EMPTY_STRING || Number(value) > 255;\n                }\n                return value === MaskExpression.EMPTY_STRING || Number(value.substring(0, 3)) > 255;\n            }));\n    }\n    _splitPercentZero(value) {\n        if (value === MaskExpression.MINUS && this.allowNegativeNumbers) {\n            return value;\n        }\n        const decimalIndex = typeof this.decimalMarker === 'string'\n            ? value.indexOf(this.decimalMarker)\n            : value.indexOf(MaskExpression.DOT);\n        const emptyOrMinus = this.allowNegativeNumbers && value.includes(MaskExpression.MINUS) ? '-' : '';\n        if (decimalIndex === -1) {\n            const parsedValue = parseInt(emptyOrMinus ? value.slice(1, value.length) : value, 10);\n            return isNaN(parsedValue)\n                ? MaskExpression.EMPTY_STRING\n                : `${emptyOrMinus}${parsedValue}`;\n        }\n        else {\n            const integerPart = parseInt(value.replace('-', '').substring(0, decimalIndex), 10);\n            const decimalPart = value.substring(decimalIndex + 1);\n            const integerString = isNaN(integerPart) ? '' : integerPart.toString();\n            const decimal = typeof this.decimalMarker === 'string' ? this.decimalMarker : MaskExpression.DOT;\n            return integerString === MaskExpression.EMPTY_STRING\n                ? MaskExpression.EMPTY_STRING\n                : `${emptyOrMinus}${integerString}${decimal}${decimalPart}`;\n        }\n    }\n    _findFirstNonZeroAndDecimalIndex(inputString, decimalMarker) {\n        let decimalMarkerIndex = null;\n        let nonZeroIndex = null;\n        for (let i = 0; i < inputString.length; i++) {\n            const char = inputString[i];\n            if (char === decimalMarker && decimalMarkerIndex === null) {\n                decimalMarkerIndex = i;\n            }\n            if (char && char >= '1' && char <= '9' && nonZeroIndex === null) {\n                nonZeroIndex = i;\n            }\n            if (decimalMarkerIndex !== null && nonZeroIndex !== null) {\n                break;\n            }\n        }\n        return {\n            decimalMarkerIndex,\n            nonZeroIndex,\n        };\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.4\", ngImport: i0, type: NgxMaskApplierService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.0.4\", ngImport: i0, type: NgxMaskApplierService });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.4\", ngImport: i0, type: NgxMaskApplierService, decorators: [{\n            type: Injectable\n        }] });\n\nclass NgxMaskService extends NgxMaskApplierService {\n    isNumberValue = false;\n    maskIsShown = '';\n    selStart = null;\n    selEnd = null;\n    maskChanged = false;\n    maskExpressionArray = [];\n    triggerOnMaskChange = false;\n    previousValue = '';\n    currentValue = '';\n    writingValue = false;\n    _emitValue = false;\n    _start;\n    _end;\n    onChange = (_) => { };\n    _elementRef = inject(ElementRef, { optional: true });\n    document = inject(DOCUMENT);\n    _config = inject(NGX_MASK_CONFIG);\n    _renderer = inject(Renderer2, { optional: true });\n    applyMask(inputValue, maskExpression, position = 0, justPasted = false, backspaced = false, cb = () => { }) {\n        if (!maskExpression) {\n            return inputValue !== this.actualValue ? this.actualValue : inputValue;\n        }\n        this.maskIsShown = this.showMaskTyped\n            ? this.showMaskInInput()\n            : MaskExpression.EMPTY_STRING;\n        if (this.maskExpression === MaskExpression.IP && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || MaskExpression.HASH);\n        }\n        if (this.maskExpression === MaskExpression.CPF_CNPJ && this.showMaskTyped) {\n            this.maskIsShown = this.showMaskInInput(inputValue || MaskExpression.HASH);\n        }\n        if (!inputValue && this.showMaskTyped) {\n            this.formControlResult(this.prefix);\n            return `${this.prefix}${this.maskIsShown}${this.suffix}`;\n        }\n        const getSymbol = !!inputValue && typeof this.selStart === 'number'\n            ? (inputValue[this.selStart] ?? MaskExpression.EMPTY_STRING)\n            : MaskExpression.EMPTY_STRING;\n        let newInputValue = '';\n        let newPosition = position;\n        if ((this.hiddenInput ||\n            (inputValue && inputValue.indexOf(MaskExpression.SYMBOL_STAR) >= 0)) &&\n            !this.writingValue) {\n            let actualResult = inputValue && inputValue.length === 1\n                ? inputValue.split(MaskExpression.EMPTY_STRING)\n                : this.actualValue.split(MaskExpression.EMPTY_STRING);\n            if (backspaced) {\n                actualResult = actualResult\n                    .slice(0, position)\n                    .concat(actualResult.slice(position + 1));\n            }\n            if (this.showMaskTyped) {\n                inputValue = this.removeMask(inputValue);\n                actualResult = this.removeMask(actualResult.join('')).split(MaskExpression.EMPTY_STRING);\n            }\n            if (typeof this.selStart === 'object' && typeof this.selEnd === 'object') {\n                this.selStart = Number(this.selStart);\n                this.selEnd = Number(this.selEnd);\n            }\n            else {\n                if (inputValue !== MaskExpression.EMPTY_STRING && actualResult.length) {\n                    if (typeof this.selStart === 'number' && typeof this.selEnd === 'number') {\n                        if (inputValue.length > actualResult.length) {\n                            actualResult.splice(this.selStart, 0, getSymbol);\n                        }\n                        else if (inputValue.length < actualResult.length) {\n                            if (actualResult.length - inputValue.length === 1) {\n                                if (backspaced) {\n                                    actualResult.splice(this.selStart - 1, 1);\n                                }\n                                else {\n                                    actualResult.splice(inputValue.length - 1, 1);\n                                }\n                            }\n                            else {\n                                actualResult.splice(this.selStart, this.selEnd - this.selStart);\n                            }\n                        }\n                    }\n                }\n                else {\n                    actualResult = [];\n                }\n            }\n            if (this.showMaskTyped && !this.hiddenInput) {\n                newInputValue = this.removeMask(inputValue);\n            }\n            if (this.actualValue.length) {\n                if (actualResult.length < inputValue.length) {\n                    newInputValue = this.shiftTypedSymbols(actualResult.join(MaskExpression.EMPTY_STRING));\n                }\n                else if (actualResult.length === inputValue.length) {\n                    newInputValue = actualResult.join(MaskExpression.EMPTY_STRING);\n                }\n                else {\n                    newInputValue = inputValue;\n                }\n            }\n            else {\n                newInputValue = inputValue;\n            }\n        }\n        if (justPasted && (this.hiddenInput || !this.hiddenInput)) {\n            newInputValue = inputValue;\n        }\n        if (backspaced &&\n            this.specialCharacters.indexOf(this.maskExpression[newPosition] ?? MaskExpression.EMPTY_STRING) !== -1 &&\n            this.showMaskTyped &&\n            !this.prefix) {\n            newInputValue = this.currentValue;\n        }\n        if (this.deletedSpecialCharacter && newPosition) {\n            if (this.specialCharacters.includes(this.actualValue.slice(newPosition, newPosition + 1))) {\n                newPosition = newPosition + 1;\n            }\n            else if (maskExpression.slice(newPosition - 1, newPosition + 1) !== MaskExpression.MONTHS) {\n                newPosition = newPosition - 2;\n            }\n            this.deletedSpecialCharacter = false;\n        }\n        if (this.showMaskTyped &&\n            this.placeHolderCharacter.length === 1 &&\n            !this.leadZeroDateTime) {\n            newInputValue = this.removeMask(newInputValue);\n        }\n        if (this.maskChanged) {\n            newInputValue = inputValue;\n        }\n        else {\n            newInputValue =\n                Boolean(newInputValue) && newInputValue.length ? newInputValue : inputValue;\n        }\n        if (this.showMaskTyped &&\n            this.keepCharacterPositions &&\n            this.actualValue &&\n            !justPasted &&\n            !this.writingValue) {\n            const value = this.dropSpecialCharacters\n                ? this.removeMask(this.actualValue)\n                : this.actualValue;\n            this.formControlResult(value);\n            return this.actualValue\n                ? this.actualValue\n                : `${this.prefix}${this.maskIsShown}${this.suffix}`;\n        }\n        const result = super.applyMask(newInputValue, maskExpression, newPosition, justPasted, backspaced, cb);\n        this.actualValue = this.getActualValue(result);\n        if (this.thousandSeparator === MaskExpression.DOT &&\n            this.decimalMarker === MaskExpression.DOT) {\n            this.decimalMarker = MaskExpression.COMMA;\n        }\n        if (this.maskExpression.startsWith(MaskExpression.SEPARATOR) &&\n            this.dropSpecialCharacters === true) {\n            this.specialCharacters = this.specialCharacters.filter((item) => !this._compareOrIncludes(item, this.decimalMarker, this.thousandSeparator));\n        }\n        if (result || result === '') {\n            this.previousValue = this.currentValue;\n            this.currentValue = result;\n            this._emitValue =\n                this.previousValue !== this.currentValue ||\n                    this.maskChanged ||\n                    this.writingValue ||\n                    (this.previousValue === this.currentValue && justPasted);\n        }\n        this._emitValue\n            ? this.writingValue && this.triggerOnMaskChange\n                ? requestAnimationFrame(() => this.formControlResult(result))\n                : this.formControlResult(result)\n            : '';\n        if (!this.showMaskTyped || (this.showMaskTyped && this.hiddenInput)) {\n            if (this.hiddenInput) {\n                return `${this.hideInput(result, this.maskExpression)}${this.maskIsShown.slice(result.length)}`;\n            }\n            return result;\n        }\n        const resLen = result.length;\n        const prefNmask = `${this.prefix}${this.maskIsShown}${this.suffix}`;\n        if (this.maskExpression.includes(MaskExpression.HOURS)) {\n            const countSkipedSymbol = this._numberSkipedSymbols(result);\n            return `${result}${prefNmask.slice(resLen + countSkipedSymbol)}`;\n        }\n        else if (this.maskExpression === MaskExpression.IP ||\n            this.maskExpression === MaskExpression.CPF_CNPJ) {\n            return `${result}${prefNmask}`;\n        }\n        return `${result}${prefNmask.slice(resLen)}`;\n    }\n    _numberSkipedSymbols(value) {\n        const regex = /(^|\\D)(\\d\\D)/g;\n        let match = regex.exec(value);\n        let countSkipedSymbol = 0;\n        while (match != null) {\n            countSkipedSymbol += 1;\n            match = regex.exec(value);\n        }\n        return countSkipedSymbol;\n    }\n    applyValueChanges(position, justPasted, backspaced, cb = () => { }) {\n        const formElement = this._elementRef?.nativeElement;\n        if (!formElement) {\n            return;\n        }\n        formElement.value = this.applyMask(formElement.value, this.maskExpression, position, justPasted, backspaced, cb);\n        if (formElement === this._getActiveElement()) {\n            return;\n        }\n        this.clearIfNotMatchFn();\n    }\n    hideInput(inputValue, maskExpression) {\n        return inputValue\n            .split(MaskExpression.EMPTY_STRING)\n            .map((curr, index) => {\n            if (this.patterns &&\n                this.patterns[maskExpression[index] ?? MaskExpression.EMPTY_STRING] &&\n                this.patterns[maskExpression[index] ?? MaskExpression.EMPTY_STRING]?.symbol) {\n                return this.patterns[maskExpression[index] ?? MaskExpression.EMPTY_STRING]\n                    ?.symbol;\n            }\n            return curr;\n        })\n            .join(MaskExpression.EMPTY_STRING);\n    }\n    getActualValue(res) {\n        const compare = res\n            .split(MaskExpression.EMPTY_STRING)\n            .filter((symbol, i) => {\n            const maskChar = this.maskExpression[i] ?? MaskExpression.EMPTY_STRING;\n            return (this._checkSymbolMask(symbol, maskChar) ||\n                (this.specialCharacters.includes(maskChar) && symbol === maskChar));\n        });\n        if (compare.join(MaskExpression.EMPTY_STRING) === res) {\n            return compare.join(MaskExpression.EMPTY_STRING);\n        }\n        return res;\n    }\n    shiftTypedSymbols(inputValue) {\n        let symbolToReplace = '';\n        const newInputValue = (inputValue &&\n            inputValue\n                .split(MaskExpression.EMPTY_STRING)\n                .map((currSymbol, index) => {\n                if (this.specialCharacters.includes(inputValue[index + 1] ?? MaskExpression.EMPTY_STRING) &&\n                    inputValue[index + 1] !== this.maskExpression[index + 1]) {\n                    symbolToReplace = currSymbol;\n                    return inputValue[index + 1];\n                }\n                if (symbolToReplace.length) {\n                    const replaceSymbol = symbolToReplace;\n                    symbolToReplace = MaskExpression.EMPTY_STRING;\n                    return replaceSymbol;\n                }\n                return currSymbol;\n            })) ||\n            [];\n        return newInputValue.join(MaskExpression.EMPTY_STRING);\n    }\n    numberToString(value) {\n        if ((!value && value !== 0) ||\n            (this.maskExpression.startsWith(MaskExpression.SEPARATOR) &&\n                (this.leadZero || !this.dropSpecialCharacters)) ||\n            (this.maskExpression.startsWith(MaskExpression.SEPARATOR) &&\n                this.separatorLimit.length > 14 &&\n                String(value).length > 14)) {\n            return String(value);\n        }\n        return Number(value)\n            .toLocaleString('fullwide', {\n            useGrouping: false,\n            maximumFractionDigits: 20,\n        })\n            .replace(`/${MaskExpression.MINUS}/`, MaskExpression.MINUS);\n    }\n    showMaskInInput(inputVal) {\n        if (this.showMaskTyped && !!this.shownMaskExpression) {\n            if (this.maskExpression.length !== this.shownMaskExpression.length) {\n                throw new Error('Mask expression must match mask placeholder length');\n            }\n            else {\n                return this.shownMaskExpression;\n            }\n        }\n        else if (this.showMaskTyped) {\n            if (inputVal) {\n                if (this.maskExpression === MaskExpression.IP) {\n                    return this._checkForIp(inputVal);\n                }\n                if (this.maskExpression === MaskExpression.CPF_CNPJ) {\n                    return this._checkForCpfCnpj(inputVal);\n                }\n            }\n            if (this.placeHolderCharacter.length === this.maskExpression.length) {\n                return this.placeHolderCharacter;\n            }\n            return this.maskExpression.replace(/\\w/g, this.placeHolderCharacter);\n        }\n        return '';\n    }\n    clearIfNotMatchFn() {\n        const formElement = this._elementRef?.nativeElement;\n        if (!formElement) {\n            return;\n        }\n        if (this.clearIfNotMatch &&\n            this.prefix.length + this.maskExpression.length + this.suffix.length !==\n                formElement.value.replace(this.placeHolderCharacter, MaskExpression.EMPTY_STRING)\n                    .length) {\n            this.formElementProperty = ['value', MaskExpression.EMPTY_STRING];\n            this.applyMask('', this.maskExpression);\n        }\n    }\n    set formElementProperty([name, value]) {\n        if (!this._renderer || !this._elementRef) {\n            return;\n        }\n        Promise.resolve().then(() => this._renderer?.setProperty(this._elementRef?.nativeElement, name, value));\n    }\n    checkDropSpecialCharAmount(mask) {\n        const chars = mask\n            .split(MaskExpression.EMPTY_STRING)\n            .filter((item) => this._findDropSpecialChar(item));\n        return chars.length;\n    }\n    removeMask(inputValue) {\n        return this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.specialCharacters.concat('_').concat(this.placeHolderCharacter));\n    }\n    _checkForIp(inputVal) {\n        if (inputVal === MaskExpression.HASH) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            const value = inputVal[i] ?? MaskExpression.EMPTY_STRING;\n            if (!value) {\n                continue;\n            }\n            if (value.match('\\\\d')) {\n                arr.push(value);\n            }\n        }\n        if (arr.length <= 3) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return `${this.placeHolderCharacter}.${this.placeHolderCharacter}`;\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return this.placeHolderCharacter;\n        }\n        if (arr.length > 9 && arr.length <= 12) {\n            return '';\n        }\n        return '';\n    }\n    _checkForCpfCnpj(inputVal) {\n        const cpf = `${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        const cnpj = `${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `.${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `/${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}${this.placeHolderCharacter}` +\n            `-${this.placeHolderCharacter}${this.placeHolderCharacter}`;\n        if (inputVal === MaskExpression.HASH) {\n            return cpf;\n        }\n        const arr = [];\n        for (let i = 0; i < inputVal.length; i++) {\n            const value = inputVal[i] ?? MaskExpression.EMPTY_STRING;\n            if (!value) {\n                continue;\n            }\n            if (value.match('\\\\d')) {\n                arr.push(value);\n            }\n        }\n        if (arr.length <= 3) {\n            return cpf.slice(arr.length, cpf.length);\n        }\n        if (arr.length > 3 && arr.length <= 6) {\n            return cpf.slice(arr.length + 1, cpf.length);\n        }\n        if (arr.length > 6 && arr.length <= 9) {\n            return cpf.slice(arr.length + 2, cpf.length);\n        }\n        if (arr.length > 9 && arr.length < 11) {\n            return cpf.slice(arr.length + 3, cpf.length);\n        }\n        if (arr.length === 11) {\n            return '';\n        }\n        if (arr.length === 12) {\n            if (inputVal.length === 17) {\n                return cnpj.slice(16, cnpj.length);\n            }\n            return cnpj.slice(15, cnpj.length);\n        }\n        if (arr.length > 12 && arr.length <= 14) {\n            return cnpj.slice(arr.length + 4, cnpj.length);\n        }\n        return '';\n    }\n    _getActiveElement(document = this.document) {\n        const shadowRootEl = document?.activeElement?.shadowRoot;\n        if (!shadowRootEl?.activeElement) {\n            return document.activeElement;\n        }\n        else {\n            return this._getActiveElement(shadowRootEl);\n        }\n    }\n    formControlResult(inputValue) {\n        if (this.writingValue && !inputValue) {\n            this.onChange(this.outputTransformFn(null));\n            return;\n        }\n        if (this.writingValue || (!this.triggerOnMaskChange && this.maskChanged)) {\n            this.triggerOnMaskChange && this.maskChanged\n                ? this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeSuffix(this._removePrefix(inputValue))))))\n                : '';\n            this.writingValue = false;\n            this.maskChanged = false;\n            return;\n        }\n        if (Array.isArray(this.dropSpecialCharacters)) {\n            this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeMask(this._removeSuffix(this._removePrefix(inputValue)), this.dropSpecialCharacters)))));\n        }\n        else if (this.dropSpecialCharacters ||\n            (!this.dropSpecialCharacters && this.prefix === inputValue)) {\n            this.onChange(this.outputTransformFn(this._toNumber(this._checkSymbols(this._removeSuffix(this._removePrefix(inputValue))))));\n        }\n        else {\n            this.onChange(this.outputTransformFn(this._toNumber(inputValue)));\n        }\n    }\n    _toNumber(value) {\n        if (!this.isNumberValue || value === MaskExpression.EMPTY_STRING) {\n            return value;\n        }\n        if (this.maskExpression.startsWith(MaskExpression.SEPARATOR) &&\n            (this.leadZero || !this.dropSpecialCharacters)) {\n            return value;\n        }\n        if (String(value).length > 14 && this.maskExpression.startsWith(MaskExpression.SEPARATOR)) {\n            return String(value);\n        }\n        const num = Number(value);\n        if (this.maskExpression.startsWith(MaskExpression.SEPARATOR) && Number.isNaN(num)) {\n            const val = String(value).replace(',', '.');\n            return Number(val);\n        }\n        return Number.isNaN(num) ? value : num;\n    }\n    _removeMask(value, specialCharactersForRemove) {\n        if (this.maskExpression.startsWith(MaskExpression.PERCENT) &&\n            value.includes(MaskExpression.DOT)) {\n            return value;\n        }\n        return value\n            ? value.replace(this._regExpForRemove(specialCharactersForRemove), MaskExpression.EMPTY_STRING)\n            : value;\n    }\n    _removePrefix(value) {\n        if (!this.prefix) {\n            return value;\n        }\n        return value ? value.replace(this.prefix, MaskExpression.EMPTY_STRING) : value;\n    }\n    _removeSuffix(value) {\n        if (!this.suffix) {\n            return value;\n        }\n        return value ? value.replace(this.suffix, MaskExpression.EMPTY_STRING) : value;\n    }\n    _retrieveSeparatorValue(result) {\n        let specialCharacters = Array.isArray(this.dropSpecialCharacters)\n            ? this.specialCharacters.filter((v) => {\n                return this.dropSpecialCharacters.includes(v);\n            })\n            : this.specialCharacters;\n        if (!this.deletedSpecialCharacter &&\n            this._checkPatternForSpace() &&\n            result.includes(MaskExpression.WHITE_SPACE) &&\n            this.maskExpression.includes(MaskExpression.SYMBOL_STAR)) {\n            specialCharacters = specialCharacters.filter((char) => char !== MaskExpression.WHITE_SPACE);\n        }\n        return this._removeMask(result, specialCharacters);\n    }\n    _regExpForRemove(specialCharactersForRemove) {\n        return new RegExp(specialCharactersForRemove.map((item) => `\\\\${item}`).join('|'), 'gi');\n    }\n    _replaceDecimalMarkerToDot(value) {\n        const markers = Array.isArray(this.decimalMarker)\n            ? this.decimalMarker\n            : [this.decimalMarker];\n        return value.replace(this._regExpForRemove(markers), MaskExpression.DOT);\n    }\n    _checkSymbols(result) {\n        let processedResult = result;\n        if (processedResult === MaskExpression.EMPTY_STRING) {\n            return processedResult;\n        }\n        if (this.maskExpression.startsWith(MaskExpression.PERCENT) &&\n            this.decimalMarker === MaskExpression.COMMA) {\n            processedResult = processedResult.replace(MaskExpression.COMMA, MaskExpression.DOT);\n        }\n        const separatorPrecision = this._retrieveSeparatorPrecision(this.maskExpression);\n        const separatorValue = this.specialCharacters.length === 0\n            ? this._retrieveSeparatorValue(processedResult)\n            : this._replaceDecimalMarkerToDot(this._retrieveSeparatorValue(processedResult));\n        if (!this.isNumberValue) {\n            return separatorValue;\n        }\n        if (separatorPrecision) {\n            if (processedResult === this.decimalMarker) {\n                return null;\n            }\n            if (separatorValue.length > 14) {\n                return String(separatorValue);\n            }\n            return this._checkPrecision(this.maskExpression, separatorValue);\n        }\n        else {\n            return separatorValue;\n        }\n    }\n    _checkPatternForSpace() {\n        for (const key in this.patterns) {\n            if (this.patterns[key] && this.patterns[key]?.hasOwnProperty('pattern')) {\n                const patternString = this.patterns[key]?.pattern.toString();\n                const pattern = this.patterns[key]?.pattern;\n                if (patternString?.includes(MaskExpression.WHITE_SPACE) &&\n                    pattern?.test(this.maskExpression)) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n    _retrieveSeparatorPrecision(maskExpretion) {\n        const matcher = maskExpretion.match(new RegExp(`^separator\\\\.([^d]*)`));\n        return matcher ? Number(matcher[1]) : null;\n    }\n    _checkPrecision(separatorExpression, separatorValue) {\n        const separatorPrecision = this.getPrecision(separatorExpression);\n        let value = separatorValue;\n        if (separatorExpression.indexOf('2') > 0 ||\n            (this.leadZero && Number(separatorPrecision) > 0)) {\n            if (this.decimalMarker === MaskExpression.COMMA && this.leadZero) {\n                value = value.replace(',', '.');\n            }\n            return this.leadZero\n                ? Number(value).toFixed(Number(separatorPrecision))\n                : Number(value).toFixed(2);\n        }\n        return this.numberToString(value);\n    }\n    _repeatPatternSymbols(maskExp) {\n        return ((maskExp.match(/{[0-9]+}/) &&\n            maskExp\n                .split(MaskExpression.EMPTY_STRING)\n                .reduce((accum, currVal, index) => {\n                this._start =\n                    currVal === MaskExpression.CURLY_BRACKETS_LEFT ? index : this._start;\n                if (currVal !== MaskExpression.CURLY_BRACKETS_RIGHT) {\n                    return this._findSpecialChar(currVal) ? accum + currVal : accum;\n                }\n                this._end = index;\n                const repeatNumber = Number(maskExp.slice(this._start + 1, this._end));\n                const replaceWith = new Array(repeatNumber + 1).join(maskExp[this._start - 1]);\n                if (maskExp.slice(0, this._start).length > 1 &&\n                    maskExp.includes(MaskExpression.LETTER_S)) {\n                    const symbols = maskExp.slice(0, this._start - 1);\n                    return symbols.includes(MaskExpression.CURLY_BRACKETS_LEFT)\n                        ? accum + replaceWith\n                        : symbols + accum + replaceWith;\n                }\n                else {\n                    return accum + replaceWith;\n                }\n            }, '')) ||\n            maskExp);\n    }\n    currentLocaleDecimalMarker() {\n        return (1.1).toLocaleString().substring(1, 2);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.4\", ngImport: i0, type: NgxMaskService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.0.4\", ngImport: i0, type: NgxMaskService });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.4\", ngImport: i0, type: NgxMaskService, decorators: [{\n            type: Injectable\n        }] });\n\nfunction _configFactory() {\n    const initConfig = inject(INITIAL_CONFIG);\n    const configValue = inject(NEW_CONFIG);\n    return configValue instanceof Function\n        ? { ...initConfig, ...configValue() }\n        : { ...initConfig, ...configValue };\n}\nfunction provideNgxMask(configValue) {\n    return [\n        {\n            provide: NEW_CONFIG,\n            useValue: configValue,\n        },\n        {\n            provide: INITIAL_CONFIG,\n            useValue: initialConfig,\n        },\n        {\n            provide: NGX_MASK_CONFIG,\n            useFactory: _configFactory,\n        },\n        NgxMaskService,\n    ];\n}\nfunction provideEnvironmentNgxMask(configValue) {\n    return makeEnvironmentProviders(provideNgxMask(configValue));\n}\n\nclass NgxMaskDirective {\n    mask = input('');\n    specialCharacters = input([]);\n    patterns = input({});\n    prefix = input('');\n    suffix = input('');\n    thousandSeparator = input(' ');\n    decimalMarker = input('.');\n    dropSpecialCharacters = input(null);\n    hiddenInput = input(null);\n    showMaskTyped = input(null);\n    placeHolderCharacter = input(null);\n    shownMaskExpression = input(null);\n    clearIfNotMatch = input(null);\n    validation = input(null);\n    separatorLimit = input('');\n    allowNegativeNumbers = input(null);\n    leadZeroDateTime = input(null);\n    leadZero = input(null);\n    triggerOnMaskChange = input(null);\n    apm = input(null);\n    inputTransformFn = input(null);\n    outputTransformFn = input(null);\n    keepCharacterPositions = input(null);\n    instantPrefix = input(null);\n    maskFilled = output();\n    _maskValue = signal('');\n    _inputValue = signal('');\n    _position = signal(null);\n    _code = signal('');\n    _maskExpressionArray = signal([]);\n    _justPasted = signal(false);\n    _isFocused = signal(false);\n    _isComposing = signal(false);\n    _maskService = inject(NgxMaskService, { self: true });\n    document = inject(DOCUMENT);\n    _config = inject(NGX_MASK_CONFIG);\n    onChange = (_) => { };\n    onTouch = () => { };\n    ngOnChanges(changes) {\n        const { mask, specialCharacters, patterns, prefix, suffix, thousandSeparator, decimalMarker, dropSpecialCharacters, hiddenInput, showMaskTyped, placeHolderCharacter, shownMaskExpression, clearIfNotMatch, validation, separatorLimit, allowNegativeNumbers, leadZeroDateTime, leadZero, triggerOnMaskChange, apm, inputTransformFn, outputTransformFn, keepCharacterPositions, instantPrefix, } = changes;\n        if (mask) {\n            if (mask.currentValue !== mask.previousValue && !mask.firstChange) {\n                this._maskService.maskChanged = true;\n            }\n            if (mask.currentValue && mask.currentValue.split(MaskExpression.OR).length > 1) {\n                this._maskExpressionArray.set(mask.currentValue.split(MaskExpression.OR).sort((a, b) => {\n                    return a.length - b.length;\n                }));\n                this._setMask();\n            }\n            else {\n                this._maskExpressionArray.set([]);\n                this._maskValue.set(mask.currentValue || MaskExpression.EMPTY_STRING);\n                this._maskService.maskExpression = this._maskValue();\n            }\n        }\n        if (specialCharacters) {\n            if (!specialCharacters.currentValue || !Array.isArray(specialCharacters.currentValue)) {\n                return;\n            }\n            else {\n                this._maskService.specialCharacters = specialCharacters.currentValue || [];\n            }\n        }\n        if (allowNegativeNumbers) {\n            this._maskService.allowNegativeNumbers = allowNegativeNumbers.currentValue;\n            if (this._maskService.allowNegativeNumbers) {\n                this._maskService.specialCharacters = this._maskService.specialCharacters.filter((c) => c !== MaskExpression.MINUS);\n            }\n        }\n        if (patterns && patterns.currentValue) {\n            this._maskService.patterns = patterns.currentValue;\n        }\n        if (apm && apm.currentValue) {\n            this._maskService.apm = apm.currentValue;\n        }\n        if (instantPrefix) {\n            this._maskService.instantPrefix = instantPrefix.currentValue;\n        }\n        if (prefix) {\n            this._maskService.prefix = prefix.currentValue;\n        }\n        if (suffix) {\n            this._maskService.suffix = suffix.currentValue;\n        }\n        if (thousandSeparator) {\n            this._maskService.thousandSeparator = thousandSeparator.currentValue;\n            if (thousandSeparator.previousValue && thousandSeparator.currentValue) {\n                const previousDecimalMarker = this._maskService.decimalMarker;\n                if (thousandSeparator.currentValue === this._maskService.decimalMarker) {\n                    this._maskService.decimalMarker =\n                        thousandSeparator.currentValue === MaskExpression.COMMA\n                            ? MaskExpression.DOT\n                            : MaskExpression.COMMA;\n                }\n                if (this._maskService.dropSpecialCharacters === true) {\n                    this._maskService.specialCharacters = this._config.specialCharacters;\n                }\n                if (typeof previousDecimalMarker === 'string' &&\n                    typeof this._maskService.decimalMarker === 'string') {\n                    this._inputValue.set(this._inputValue()\n                        .split(thousandSeparator.previousValue)\n                        .join('')\n                        .replace(previousDecimalMarker, this._maskService.decimalMarker));\n                    this._maskService.actualValue = this._inputValue();\n                }\n                this._maskService.writingValue = true;\n            }\n        }\n        if (decimalMarker) {\n            this._maskService.decimalMarker = decimalMarker.currentValue;\n        }\n        if (dropSpecialCharacters) {\n            this._maskService.dropSpecialCharacters = dropSpecialCharacters.currentValue;\n        }\n        if (hiddenInput) {\n            this._maskService.hiddenInput = hiddenInput.currentValue;\n            if (hiddenInput.previousValue === true && hiddenInput.currentValue === false) {\n                this._inputValue.set(this._maskService.actualValue);\n            }\n        }\n        if (showMaskTyped) {\n            this._maskService.showMaskTyped = showMaskTyped.currentValue;\n            if (showMaskTyped.previousValue === false &&\n                showMaskTyped.currentValue === true &&\n                this._isFocused()) {\n                requestAnimationFrame(() => {\n                    this._maskService._elementRef?.nativeElement.click();\n                });\n            }\n        }\n        if (placeHolderCharacter) {\n            this._maskService.placeHolderCharacter = placeHolderCharacter.currentValue;\n        }\n        if (shownMaskExpression) {\n            this._maskService.shownMaskExpression = shownMaskExpression.currentValue;\n        }\n        if (clearIfNotMatch) {\n            this._maskService.clearIfNotMatch = clearIfNotMatch.currentValue;\n        }\n        if (validation) {\n            this._maskService.validation = validation.currentValue;\n        }\n        if (separatorLimit) {\n            this._maskService.separatorLimit = separatorLimit.currentValue;\n        }\n        if (leadZeroDateTime) {\n            this._maskService.leadZeroDateTime = leadZeroDateTime.currentValue;\n        }\n        if (leadZero) {\n            this._maskService.leadZero = leadZero.currentValue;\n        }\n        if (triggerOnMaskChange) {\n            this._maskService.triggerOnMaskChange = triggerOnMaskChange.currentValue;\n        }\n        if (inputTransformFn) {\n            this._maskService.inputTransformFn = inputTransformFn.currentValue;\n        }\n        if (outputTransformFn) {\n            this._maskService.outputTransformFn = outputTransformFn.currentValue;\n        }\n        if (keepCharacterPositions) {\n            this._maskService.keepCharacterPositions = keepCharacterPositions.currentValue;\n        }\n        this._applyMask();\n    }\n    validate({ value }) {\n        const processedValue = typeof value === 'number' ? String(value) : value;\n        const maskValue = this._maskValue();\n        if (!this._maskService.validation || !maskValue) {\n            return null;\n        }\n        if (this._maskService.ipError) {\n            return this._createValidationError(processedValue);\n        }\n        if (this._maskService.cpfCnpjError) {\n            return this._createValidationError(processedValue);\n        }\n        if (maskValue.startsWith(MaskExpression.SEPARATOR)) {\n            return null;\n        }\n        if (withoutValidation.includes(maskValue)) {\n            return null;\n        }\n        if (this._maskService.clearIfNotMatch) {\n            return null;\n        }\n        if (timeMasks.includes(maskValue)) {\n            return this._validateTime(processedValue);\n        }\n        if (maskValue === MaskExpression.EMAIL_MASK) {\n            const emailPattern = /^[^@]+@[^@]+\\.[^@]+$/;\n            if (!emailPattern.test(processedValue) && processedValue) {\n                return this._createValidationError(processedValue);\n            }\n            else {\n                return null;\n            }\n        }\n        if (processedValue && processedValue.length >= 1) {\n            let counterOfOpt = 0;\n            if (maskValue.includes(MaskExpression.CURLY_BRACKETS_LEFT) &&\n                maskValue.includes(MaskExpression.CURLY_BRACKETS_RIGHT)) {\n                const lengthInsideCurlyBrackets = maskValue.slice(maskValue.indexOf(MaskExpression.CURLY_BRACKETS_LEFT) + 1, maskValue.indexOf(MaskExpression.CURLY_BRACKETS_RIGHT));\n                return lengthInsideCurlyBrackets === String(processedValue.length)\n                    ? null\n                    : this._createValidationError(processedValue);\n            }\n            if (maskValue.startsWith(MaskExpression.PERCENT)) {\n                return null;\n            }\n            for (const key in this._maskService.patterns) {\n                if (this._maskService.patterns[key]?.optional) {\n                    if (maskValue.indexOf(key) !== maskValue.lastIndexOf(key)) {\n                        const opt = maskValue\n                            .split(MaskExpression.EMPTY_STRING)\n                            .filter((i) => i === key)\n                            .join(MaskExpression.EMPTY_STRING);\n                        counterOfOpt += opt.length;\n                    }\n                    else if (maskValue.indexOf(key) !== -1) {\n                        counterOfOpt++;\n                    }\n                    if (maskValue.indexOf(key) !== -1 &&\n                        processedValue.length >= maskValue.indexOf(key)) {\n                        return null;\n                    }\n                    if (counterOfOpt === maskValue.length) {\n                        return null;\n                    }\n                }\n            }\n            if ((maskValue.indexOf(MaskExpression.SYMBOL_STAR) > 1 &&\n                processedValue.length < maskValue.indexOf(MaskExpression.SYMBOL_STAR)) ||\n                (maskValue.indexOf(MaskExpression.SYMBOL_QUESTION) > 1 &&\n                    processedValue.length < maskValue.indexOf(MaskExpression.SYMBOL_QUESTION))) {\n                return this._createValidationError(processedValue);\n            }\n            if (maskValue.indexOf(MaskExpression.SYMBOL_STAR) === -1 ||\n                maskValue.indexOf(MaskExpression.SYMBOL_QUESTION) === -1) {\n                const array = maskValue.split('*');\n                const length = this._maskService.dropSpecialCharacters\n                    ? maskValue.length -\n                        this._maskService.checkDropSpecialCharAmount(maskValue) -\n                        counterOfOpt\n                    : this.prefix()\n                        ? maskValue.length + this.prefix().length - counterOfOpt\n                        : maskValue.length - counterOfOpt;\n                if (array.length === 1) {\n                    if (processedValue.length < length) {\n                        return this._createValidationError(processedValue);\n                    }\n                }\n                if (array.length > 1) {\n                    const lastIndexArray = array[array.length - 1];\n                    if (lastIndexArray &&\n                        this._maskService.specialCharacters.includes(lastIndexArray[0]) &&\n                        String(processedValue).includes(lastIndexArray[0] ?? '') &&\n                        !this.dropSpecialCharacters()) {\n                        const special = value.split(lastIndexArray[0]);\n                        return special[special.length - 1].length === lastIndexArray.length - 1\n                            ? null\n                            : this._createValidationError(processedValue);\n                    }\n                    else if (((lastIndexArray &&\n                        !this._maskService.specialCharacters.includes(lastIndexArray[0])) ||\n                        !lastIndexArray ||\n                        this._maskService.dropSpecialCharacters) &&\n                        processedValue.length >= length - 1) {\n                        return null;\n                    }\n                    else {\n                        return this._createValidationError(processedValue);\n                    }\n                }\n            }\n            if (maskValue.indexOf(MaskExpression.SYMBOL_STAR) === 1 ||\n                maskValue.indexOf(MaskExpression.SYMBOL_QUESTION) === 1) {\n                return null;\n            }\n        }\n        if (value) {\n            this.maskFilled.emit();\n            return null;\n        }\n        return null;\n    }\n    onPaste() {\n        this._justPasted.set(true);\n    }\n    onFocus() {\n        this._isFocused.set(true);\n    }\n    onModelChange(value) {\n        if ((value === MaskExpression.EMPTY_STRING ||\n            value === null ||\n            typeof value === 'undefined') &&\n            this._maskService.actualValue) {\n            this._maskService.actualValue = this._maskService.getActualValue(MaskExpression.EMPTY_STRING);\n        }\n    }\n    onInput(e) {\n        if (this._isComposing()) {\n            return;\n        }\n        const el = e.target;\n        const transformedValue = this._maskService.inputTransformFn(el.value);\n        if (el.type !== 'number') {\n            if (typeof transformedValue === 'string' || typeof transformedValue === 'number') {\n                el.value = transformedValue.toString();\n                this._inputValue.set(el.value);\n                this._setMask();\n                if (!this._maskValue()) {\n                    this.onChange(el.value);\n                    return;\n                }\n                let position = el.selectionStart === 1\n                    ? el.selectionStart + this._maskService.prefix.length\n                    : el.selectionStart;\n                if (this.showMaskTyped() &&\n                    this.keepCharacterPositions() &&\n                    this._maskService.placeHolderCharacter.length === 1) {\n                    const suffix = this.suffix();\n                    const prefix = this.prefix();\n                    const inputSymbol = el.value.slice(position - 1, position);\n                    const prefixLength = prefix.length;\n                    const checkSymbols = this._maskService._checkSymbolMask(inputSymbol, this._maskService.maskExpression[position - 1 - prefixLength] ??\n                        MaskExpression.EMPTY_STRING);\n                    const checkSpecialCharacter = this._maskService._checkSymbolMask(inputSymbol, this._maskService.maskExpression[position + 1 - prefixLength] ??\n                        MaskExpression.EMPTY_STRING);\n                    const selectRangeBackspace = this._maskService.selStart === this._maskService.selEnd;\n                    const selStart = Number(this._maskService.selStart) - prefixLength;\n                    const selEnd = Number(this._maskService.selEnd) - prefixLength;\n                    const backspaceOrDelete = this._code() === MaskExpression.BACKSPACE ||\n                        this._code() === MaskExpression.DELETE;\n                    if (backspaceOrDelete) {\n                        if (!selectRangeBackspace) {\n                            if (this._maskService.selStart === prefixLength) {\n                                this._maskService.actualValue = `${prefix}${this._maskService.maskIsShown.slice(0, selEnd)}${this._inputValue().split(prefix).join('')}`;\n                            }\n                            else if (this._maskService.selStart ===\n                                this._maskService.maskIsShown.length + prefixLength) {\n                                this._maskService.actualValue = `${this._inputValue()}${this._maskService.maskIsShown.slice(selStart, selEnd)}`;\n                            }\n                            else {\n                                this._maskService.actualValue = `${prefix}${this._inputValue()\n                                    .split(prefix)\n                                    .join('')\n                                    .slice(0, selStart)}${this._maskService.maskIsShown.slice(selStart, selEnd)}${this._maskService.actualValue.slice(selEnd + prefixLength, this._maskService.maskIsShown.length + prefixLength)}${suffix}`;\n                            }\n                        }\n                        else if (!this._maskService.specialCharacters.includes(this._maskService.maskExpression.slice(position - prefixLength, position + 1 - prefixLength)) &&\n                            selectRangeBackspace) {\n                            if (selStart === 1 && prefix) {\n                                this._maskService.actualValue = `${prefix}${this._maskService.placeHolderCharacter}${el.value\n                                    .split(prefix)\n                                    .join('')\n                                    .split(suffix)\n                                    .join('')}${suffix}`;\n                                position = position - 1;\n                            }\n                            else {\n                                const part1 = el.value.substring(0, position);\n                                const part2 = el.value.substring(position);\n                                this._maskService.actualValue = `${part1}${this._maskService.placeHolderCharacter}${part2}`;\n                            }\n                        }\n                        position = this._code() === MaskExpression.DELETE ? position + 1 : position;\n                    }\n                    if (!backspaceOrDelete) {\n                        if (!checkSymbols && !checkSpecialCharacter && selectRangeBackspace) {\n                            position = Number(el.selectionStart) - 1;\n                        }\n                        else if (this._maskService.specialCharacters.includes(el.value.slice(position, position + 1)) &&\n                            checkSpecialCharacter &&\n                            !this._maskService.specialCharacters.includes(el.value.slice(position + 1, position + 2))) {\n                            this._maskService.actualValue = `${el.value.slice(0, position - 1)}${el.value.slice(position, position + 1)}${inputSymbol}${el.value.slice(position + 2)}`;\n                            position = position + 1;\n                        }\n                        else if (checkSymbols) {\n                            if (el.value.length === 1 && position === 1) {\n                                this._maskService.actualValue = `${prefix}${inputSymbol}${this._maskService.maskIsShown.slice(1, this._maskService.maskIsShown.length)}${suffix}`;\n                            }\n                            else {\n                                this._maskService.actualValue = `${el.value.slice(0, position - 1)}${inputSymbol}${el.value\n                                    .slice(position + 1)\n                                    .split(suffix)\n                                    .join('')}${suffix}`;\n                            }\n                        }\n                        else if (prefix &&\n                            el.value.length === 1 &&\n                            position - prefixLength === 1 &&\n                            this._maskService._checkSymbolMask(el.value, this._maskService.maskExpression[position - 1 - prefixLength] ??\n                                MaskExpression.EMPTY_STRING)) {\n                            this._maskService.actualValue = `${prefix}${el.value}${this._maskService.maskIsShown.slice(1, this._maskService.maskIsShown.length)}${suffix}`;\n                        }\n                    }\n                }\n                let caretShift = 0;\n                let backspaceShift = false;\n                if (this._code() === MaskExpression.DELETE && MaskExpression.SEPARATOR) {\n                    this._maskService.deletedSpecialCharacter = true;\n                }\n                if (this._inputValue().length >= this._maskService.maskExpression.length - 1 &&\n                    this._code() !== MaskExpression.BACKSPACE &&\n                    this._maskService.maskExpression === MaskExpression.DAYS_MONTHS_YEARS &&\n                    position < 10) {\n                    const inputSymbol = this._inputValue().slice(position - 1, position);\n                    el.value =\n                        this._inputValue().slice(0, position - 1) +\n                            inputSymbol +\n                            this._inputValue().slice(position + 1);\n                }\n                if (this._maskService.maskExpression === MaskExpression.DAYS_MONTHS_YEARS &&\n                    this.leadZeroDateTime()) {\n                    if ((position < 3 && Number(el.value) > 31 && Number(el.value) < 40) ||\n                        (position === 5 && Number(el.value.slice(3, 5)) > 12)) {\n                        position = position + 2;\n                    }\n                }\n                if (this._maskService.maskExpression === MaskExpression.HOURS_MINUTES_SECONDS &&\n                    this.apm()) {\n                    if (this._justPasted() && el.value.slice(0, 2) === MaskExpression.DOUBLE_ZERO) {\n                        el.value = el.value.slice(1, 2) + el.value.slice(2, el.value.length);\n                    }\n                    el.value =\n                        el.value === MaskExpression.DOUBLE_ZERO\n                            ? MaskExpression.NUMBER_ZERO\n                            : el.value;\n                }\n                this._maskService.applyValueChanges(position, this._justPasted(), this._code() === MaskExpression.BACKSPACE ||\n                    this._code() === MaskExpression.DELETE, (shift, _backspaceShift) => {\n                    this._justPasted.set(false);\n                    caretShift = shift;\n                    backspaceShift = _backspaceShift;\n                });\n                if (this._getActiveElement() !== el) {\n                    return;\n                }\n                if (this._maskService.plusOnePosition) {\n                    position = position + 1;\n                    this._maskService.plusOnePosition = false;\n                }\n                if (this._maskExpressionArray().length) {\n                    if (this._code() === MaskExpression.BACKSPACE) {\n                        const specialChartMinusOne = this.specialCharacters().includes(this._maskService.actualValue.slice(position - 1, position));\n                        const allowFewMaskChangeMask = this._maskService.removeMask(this._inputValue())?.length ===\n                            this._maskService.removeMask(this._maskService.maskExpression)?.length;\n                        const specialChartPlusOne = this.specialCharacters().includes(this._maskService.actualValue.slice(position, position + 1));\n                        if (allowFewMaskChangeMask && !specialChartPlusOne) {\n                            position = el.selectionStart + 1;\n                        }\n                        else {\n                            position = specialChartMinusOne ? position - 1 : position;\n                        }\n                    }\n                    else {\n                        position =\n                            el.selectionStart === 1\n                                ? el.selectionStart + this._maskService.prefix.length\n                                : el.selectionStart;\n                    }\n                }\n                this._position.set(this._position() === 1 && this._inputValue().length === 1\n                    ? null\n                    : this._position());\n                let positionToApply = this._position()\n                    ? this._inputValue().length + position + caretShift\n                    : position +\n                        (this._code() === MaskExpression.BACKSPACE && !backspaceShift\n                            ? 0\n                            : caretShift);\n                if (positionToApply > this._getActualInputLength()) {\n                    positionToApply =\n                        el.value === this._maskService.decimalMarker && el.value.length === 1\n                            ? this._getActualInputLength() + 1\n                            : this._getActualInputLength();\n                }\n                if (positionToApply < 0) {\n                    positionToApply = 0;\n                }\n                el.setSelectionRange(positionToApply, positionToApply);\n                this._position.set(null);\n            }\n            else {\n                console.warn('Ngx-mask writeValue work with string | number, your current value:', typeof transformedValue);\n            }\n        }\n        else {\n            if (!this._maskValue()) {\n                this.onChange(el.value);\n                return;\n            }\n            this._maskService.applyValueChanges(el.value.length, this._justPasted(), this._code() === MaskExpression.BACKSPACE || this._code() === MaskExpression.DELETE);\n        }\n    }\n    onCompositionStart() {\n        this._isComposing.set(true);\n    }\n    onCompositionEnd(e) {\n        this._isComposing.set(false);\n        this._justPasted.set(true);\n        this.onInput(e);\n    }\n    onBlur(e) {\n        if (this._maskValue()) {\n            const el = e.target;\n            if (this._maskService.leadZero &&\n                el.value.length > 0 &&\n                typeof this._maskService.decimalMarker === 'string') {\n                const maskExpression = this._maskService.maskExpression;\n                const decimalMarker = this._maskService.decimalMarker;\n                const suffix = this._maskService.suffix;\n                const precision = Number(this._maskService.maskExpression.slice(maskExpression.length - 1, maskExpression.length));\n                if (precision > 0) {\n                    el.value = suffix ? el.value.split(suffix).join('') : el.value;\n                    const decimalPart = el.value.split(decimalMarker)[1];\n                    el.value = el.value.includes(decimalMarker)\n                        ? el.value +\n                            MaskExpression.NUMBER_ZERO.repeat(precision - decimalPart.length) +\n                            suffix\n                        : el.value +\n                            decimalMarker +\n                            MaskExpression.NUMBER_ZERO.repeat(precision) +\n                            suffix;\n                    this._maskService.actualValue = el.value;\n                }\n            }\n            this._maskService.clearIfNotMatchFn();\n        }\n        this._isFocused.set(false);\n        this.onTouch();\n    }\n    onClick(e) {\n        if (!this._maskValue()) {\n            return;\n        }\n        const el = e.target;\n        const posStart = 0;\n        const posEnd = 0;\n        if (el !== null &&\n            el.selectionStart !== null &&\n            el.selectionStart === el.selectionEnd &&\n            el.selectionStart > this._maskService.prefix.length &&\n            e.keyCode !== 38) {\n            if (this._maskService.showMaskTyped && !this.keepCharacterPositions()) {\n                this._maskService.maskIsShown = this._maskService.showMaskInInput();\n                if (el.setSelectionRange &&\n                    this._maskService.prefix + this._maskService.maskIsShown === el.value) {\n                    el.focus();\n                    el.setSelectionRange(posStart, posEnd);\n                }\n                else {\n                    if (el.selectionStart > this._maskService.actualValue.length) {\n                        el.setSelectionRange(this._maskService.actualValue.length, this._maskService.actualValue.length);\n                    }\n                }\n            }\n        }\n        const nextValue = el &&\n            (el.value === this._maskService.prefix\n                ? this._maskService.prefix + this._maskService.maskIsShown\n                : el.value);\n        if (el && el.value !== nextValue) {\n            el.value = nextValue;\n        }\n        if (el &&\n            el.type !== 'number' &&\n            (el.selectionStart || el.selectionEnd) <=\n                this._maskService.prefix.length) {\n            const specialCharactersAtTheStart = this._maskService.maskExpression.match(new RegExp(`^[${this._maskService.specialCharacters.map((c) => `\\\\${c}`).join('')}]+`))?.[0].length || 0;\n            el.selectionStart = this._maskService.prefix.length + specialCharactersAtTheStart;\n            return;\n        }\n        if (el && el.selectionEnd > this._getActualInputLength()) {\n            el.selectionEnd = this._getActualInputLength();\n        }\n    }\n    onKeyDown(e) {\n        if (!this._maskValue()) {\n            return;\n        }\n        if (this._isComposing()) {\n            if (e.key === 'Enter') {\n                this.onCompositionEnd(e);\n            }\n            return;\n        }\n        this._code.set(e.code ? e.code : e.key);\n        const el = e.target;\n        this._inputValue.set(el.value);\n        this._setMask();\n        if (el.type !== 'number') {\n            if (e.key === MaskExpression.ARROW_UP) {\n                e.preventDefault();\n            }\n            if (e.key === MaskExpression.ARROW_LEFT ||\n                e.key === MaskExpression.BACKSPACE ||\n                e.key === MaskExpression.DELETE) {\n                if (e.key === MaskExpression.BACKSPACE && el.value.length === 0) {\n                    el.selectionStart = el.selectionEnd;\n                }\n                if (e.key === MaskExpression.BACKSPACE && el.selectionStart !== 0) {\n                    const prefixLength = this.prefix().length;\n                    const specialCharacters = this.specialCharacters().length\n                        ? this.specialCharacters()\n                        : this._config.specialCharacters;\n                    if (prefixLength > 1 && el.selectionStart <= prefixLength) {\n                        el.setSelectionRange(prefixLength, el.selectionEnd);\n                    }\n                    else {\n                        if (this._inputValue().length !== el.selectionStart &&\n                            el.selectionStart !== 1) {\n                            while (specialCharacters.includes((this._inputValue()[el.selectionStart - 1] ??\n                                MaskExpression.EMPTY_STRING).toString()) &&\n                                ((prefixLength >= 1 &&\n                                    el.selectionStart > prefixLength) ||\n                                    prefixLength === 0)) {\n                                el.setSelectionRange(el.selectionStart - 1, el.selectionEnd);\n                            }\n                        }\n                    }\n                }\n                this.checkSelectionOnDeletion(el);\n                if (this._maskService.prefix.length &&\n                    el.selectionStart <= this._maskService.prefix.length &&\n                    el.selectionEnd <= this._maskService.prefix.length) {\n                    e.preventDefault();\n                }\n                const cursorStart = el.selectionStart;\n                if (e.key === MaskExpression.BACKSPACE &&\n                    !el.readOnly &&\n                    cursorStart === 0 &&\n                    el.selectionEnd === el.value.length &&\n                    el.value.length !== 0) {\n                    this._position.set(this._maskService.prefix ? this._maskService.prefix.length : 0);\n                    this._maskService.applyMask(this._maskService.prefix, this._maskService.maskExpression, this._position());\n                }\n            }\n            if (!!this.suffix() &&\n                this.suffix().length > 1 &&\n                this._inputValue().length - this.suffix().length < el.selectionStart) {\n                el.setSelectionRange(this._inputValue().length - this.suffix().length, this._inputValue().length);\n            }\n            else if ((e.code === 'KeyA' && e.ctrlKey) ||\n                (e.code === 'KeyA' && e.metaKey)) {\n                el.setSelectionRange(0, this._getActualInputLength());\n                e.preventDefault();\n            }\n            this._maskService.selStart = el.selectionStart;\n            this._maskService.selEnd = el.selectionEnd;\n        }\n    }\n    async writeValue(controlValue) {\n        let value = controlValue;\n        const inputTransformFn = this.inputTransformFn();\n        if (typeof value === 'object' && value !== null && 'value' in value) {\n            if ('disable' in value) {\n                this.setDisabledState(Boolean(value.disable));\n            }\n            value = value.value;\n        }\n        if (value !== null) {\n            value = inputTransformFn ? inputTransformFn(value) : value;\n        }\n        if (typeof value === 'string' ||\n            typeof value === 'number' ||\n            value === null ||\n            typeof value === 'undefined') {\n            if (value === null || typeof value === 'undefined' || value === '') {\n                this._maskService.currentValue = '';\n                this._maskService.previousValue = '';\n            }\n            let inputValue = value;\n            if (typeof inputValue === 'number' ||\n                this._maskValue().startsWith(MaskExpression.SEPARATOR)) {\n                inputValue = String(inputValue);\n                const localeDecimalMarker = this._maskService.currentLocaleDecimalMarker();\n                if (!Array.isArray(this._maskService.decimalMarker)) {\n                    inputValue =\n                        this._maskService.decimalMarker !== localeDecimalMarker\n                            ? inputValue.replace(localeDecimalMarker, this._maskService.decimalMarker)\n                            : inputValue;\n                }\n                if (this._maskService.leadZero &&\n                    inputValue &&\n                    this.mask() &&\n                    this.dropSpecialCharacters() !== false) {\n                    inputValue = this._maskService._checkPrecision(this._maskService.maskExpression, inputValue);\n                }\n                if (this._maskService.decimalMarker === MaskExpression.COMMA ||\n                    (Array.isArray(this._maskService.decimalMarker) &&\n                        this._maskService.thousandSeparator === MaskExpression.DOT)) {\n                    inputValue = inputValue\n                        .toString()\n                        .replace(MaskExpression.DOT, MaskExpression.COMMA);\n                }\n                if (this.mask()?.startsWith(MaskExpression.SEPARATOR) && this.leadZero()) {\n                    requestAnimationFrame(() => {\n                        this._maskService.applyMask(inputValue?.toString() ?? '', this._maskService.maskExpression);\n                    });\n                }\n                this._maskService.isNumberValue = true;\n            }\n            if (typeof inputValue !== 'string' || value === null || typeof value === 'undefined') {\n                inputValue = '';\n            }\n            this._inputValue.set(inputValue);\n            this._setMask();\n            if ((inputValue && this._maskService.maskExpression) ||\n                (this._maskService.maskExpression &&\n                    (this._maskService.prefix || this._maskService.showMaskTyped))) {\n                if (typeof inputTransformFn !== 'function') {\n                    this._maskService.writingValue = true;\n                }\n                this._maskService.formElementProperty = [\n                    'value',\n                    this._maskService.applyMask(inputValue, this._maskService.maskExpression),\n                ];\n                if (typeof inputTransformFn !== 'function') {\n                    this._maskService.writingValue = false;\n                }\n            }\n            else {\n                this._maskService.formElementProperty = ['value', inputValue];\n            }\n            this._inputValue.set(inputValue);\n        }\n        else {\n            console.warn('Ngx-mask writeValue work with string | number, your current value:', typeof value);\n        }\n    }\n    registerOnChange(fn) {\n        this._maskService.onChange = this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouch = fn;\n    }\n    _getActiveElement(document = this.document) {\n        const shadowRootEl = document?.activeElement?.shadowRoot;\n        if (!shadowRootEl?.activeElement) {\n            return document.activeElement;\n        }\n        else {\n            return this._getActiveElement(shadowRootEl);\n        }\n    }\n    checkSelectionOnDeletion(el) {\n        const prefixLength = this.prefix().length;\n        const suffixLength = this.suffix().length;\n        const inputValueLength = this._inputValue().length;\n        el.selectionStart = Math.min(Math.max(prefixLength, el.selectionStart), inputValueLength - suffixLength);\n        el.selectionEnd = Math.min(Math.max(prefixLength, el.selectionEnd), inputValueLength - suffixLength);\n    }\n    setDisabledState(isDisabled) {\n        this._maskService.formElementProperty = ['disabled', isDisabled];\n    }\n    _applyMask() {\n        this._maskService.maskExpression = this._maskService._repeatPatternSymbols(this._maskValue() || '');\n        this._maskService.formElementProperty = [\n            'value',\n            this._maskService.applyMask(this._inputValue(), this._maskService.maskExpression),\n        ];\n    }\n    _validateTime(value) {\n        const rowMaskLen = this._maskValue()\n            .split(MaskExpression.EMPTY_STRING)\n            .filter((s) => s !== ':').length;\n        if (!value) {\n            return null;\n        }\n        if ((+(value[value.length - 1] ?? -1) === 0 && value.length < rowMaskLen) ||\n            value.length <= rowMaskLen - 2) {\n            return this._createValidationError(value);\n        }\n        return null;\n    }\n    _getActualInputLength() {\n        return (this._maskService.actualValue.length ||\n            this._maskService.actualValue.length + this._maskService.prefix.length);\n    }\n    _createValidationError(actualValue) {\n        return {\n            mask: {\n                requiredMask: this._maskValue(),\n                actualValue,\n            },\n        };\n    }\n    _setMask() {\n        this._maskExpressionArray().some((mask) => {\n            const specialChart = mask\n                .split(MaskExpression.EMPTY_STRING)\n                .some((char) => this._maskService.specialCharacters.includes(char));\n            if ((specialChart &&\n                this._inputValue() &&\n                this._areAllCharactersInEachStringSame(this._maskExpressionArray())) ||\n                mask.includes(MaskExpression.CURLY_BRACKETS_LEFT)) {\n                const test = this._maskService.removeMask(this._inputValue())?.length <=\n                    this._maskService.removeMask(mask)?.length;\n                if (test) {\n                    const maskValue = mask.includes(MaskExpression.CURLY_BRACKETS_LEFT)\n                        ? this._maskService._repeatPatternSymbols(mask)\n                        : mask;\n                    this._maskValue.set(maskValue);\n                    this._maskService.maskExpression = maskValue;\n                    return test;\n                }\n                else {\n                    const expression = this._maskExpressionArray()[this._maskExpressionArray().length - 1] ??\n                        MaskExpression.EMPTY_STRING;\n                    const maskValue = expression.includes(MaskExpression.CURLY_BRACKETS_LEFT)\n                        ? this._maskService._repeatPatternSymbols(expression)\n                        : expression;\n                    this._maskValue.set(maskValue);\n                    this._maskService.maskExpression = maskValue;\n                }\n            }\n            else {\n                const cleanMask = this._maskService.removeMask(mask);\n                const check = this._maskService\n                    .removeMask(this._inputValue())\n                    ?.split(MaskExpression.EMPTY_STRING)\n                    .every((character, index) => {\n                    const indexMask = cleanMask.charAt(index);\n                    return this._maskService._checkSymbolMask(character, indexMask);\n                });\n                if (check || this._justPasted()) {\n                    this._maskValue.set(mask);\n                    this._maskService.maskExpression = mask;\n                    return check;\n                }\n            }\n        });\n    }\n    _areAllCharactersInEachStringSame(array) {\n        const specialCharacters = this._maskService.specialCharacters;\n        function removeSpecialCharacters(str) {\n            const regex = new RegExp(`[${specialCharacters.map((ch) => `\\\\${ch}`).join('')}]`, 'g');\n            return str.replace(regex, '');\n        }\n        const processedArr = array.map(removeSpecialCharacters);\n        return processedArr.every((str) => {\n            const uniqueCharacters = new Set(str);\n            return uniqueCharacters.size === 1;\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.4\", ngImport: i0, type: NgxMaskDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"17.1.0\", version: \"19.0.4\", type: NgxMaskDirective, isStandalone: true, selector: \"input[mask], textarea[mask]\", inputs: { mask: { classPropertyName: \"mask\", publicName: \"mask\", isSignal: true, isRequired: false, transformFunction: null }, specialCharacters: { classPropertyName: \"specialCharacters\", publicName: \"specialCharacters\", isSignal: true, isRequired: false, transformFunction: null }, patterns: { classPropertyName: \"patterns\", publicName: \"patterns\", isSignal: true, isRequired: false, transformFunction: null }, prefix: { classPropertyName: \"prefix\", publicName: \"prefix\", isSignal: true, isRequired: false, transformFunction: null }, suffix: { classPropertyName: \"suffix\", publicName: \"suffix\", isSignal: true, isRequired: false, transformFunction: null }, thousandSeparator: { classPropertyName: \"thousandSeparator\", publicName: \"thousandSeparator\", isSignal: true, isRequired: false, transformFunction: null }, decimalMarker: { classPropertyName: \"decimalMarker\", publicName: \"decimalMarker\", isSignal: true, isRequired: false, transformFunction: null }, dropSpecialCharacters: { classPropertyName: \"dropSpecialCharacters\", publicName: \"dropSpecialCharacters\", isSignal: true, isRequired: false, transformFunction: null }, hiddenInput: { classPropertyName: \"hiddenInput\", publicName: \"hiddenInput\", isSignal: true, isRequired: false, transformFunction: null }, showMaskTyped: { classPropertyName: \"showMaskTyped\", publicName: \"showMaskTyped\", isSignal: true, isRequired: false, transformFunction: null }, placeHolderCharacter: { classPropertyName: \"placeHolderCharacter\", publicName: \"placeHolderCharacter\", isSignal: true, isRequired: false, transformFunction: null }, shownMaskExpression: { classPropertyName: \"shownMaskExpression\", publicName: \"shownMaskExpression\", isSignal: true, isRequired: false, transformFunction: null }, clearIfNotMatch: { classPropertyName: \"clearIfNotMatch\", publicName: \"clearIfNotMatch\", isSignal: true, isRequired: false, transformFunction: null }, validation: { classPropertyName: \"validation\", publicName: \"validation\", isSignal: true, isRequired: false, transformFunction: null }, separatorLimit: { classPropertyName: \"separatorLimit\", publicName: \"separatorLimit\", isSignal: true, isRequired: false, transformFunction: null }, allowNegativeNumbers: { classPropertyName: \"allowNegativeNumbers\", publicName: \"allowNegativeNumbers\", isSignal: true, isRequired: false, transformFunction: null }, leadZeroDateTime: { classPropertyName: \"leadZeroDateTime\", publicName: \"leadZeroDateTime\", isSignal: true, isRequired: false, transformFunction: null }, leadZero: { classPropertyName: \"leadZero\", publicName: \"leadZero\", isSignal: true, isRequired: false, transformFunction: null }, triggerOnMaskChange: { classPropertyName: \"triggerOnMaskChange\", publicName: \"triggerOnMaskChange\", isSignal: true, isRequired: false, transformFunction: null }, apm: { classPropertyName: \"apm\", publicName: \"apm\", isSignal: true, isRequired: false, transformFunction: null }, inputTransformFn: { classPropertyName: \"inputTransformFn\", publicName: \"inputTransformFn\", isSignal: true, isRequired: false, transformFunction: null }, outputTransformFn: { classPropertyName: \"outputTransformFn\", publicName: \"outputTransformFn\", isSignal: true, isRequired: false, transformFunction: null }, keepCharacterPositions: { classPropertyName: \"keepCharacterPositions\", publicName: \"keepCharacterPositions\", isSignal: true, isRequired: false, transformFunction: null }, instantPrefix: { classPropertyName: \"instantPrefix\", publicName: \"instantPrefix\", isSignal: true, isRequired: false, transformFunction: null } }, outputs: { maskFilled: \"maskFilled\" }, host: { listeners: { \"paste\": \"onPaste()\", \"focus\": \"onFocus($event)\", \"ngModelChange\": \"onModelChange($event)\", \"input\": \"onInput($event)\", \"compositionstart\": \"onCompositionStart($event)\", \"compositionend\": \"onCompositionEnd($event)\", \"blur\": \"onBlur($event)\", \"click\": \"onClick($event)\", \"keydown\": \"onKeyDown($event)\" } }, providers: [\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: NgxMaskDirective,\n                multi: true,\n            },\n            {\n                provide: NG_VALIDATORS,\n                useExisting: NgxMaskDirective,\n                multi: true,\n            },\n            NgxMaskService,\n        ], exportAs: [\"mask\", \"ngxMask\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.4\", ngImport: i0, type: NgxMaskDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'input[mask], textarea[mask]',\n                    standalone: true,\n                    providers: [\n                        {\n                            provide: NG_VALUE_ACCESSOR,\n                            useExisting: NgxMaskDirective,\n                            multi: true,\n                        },\n                        {\n                            provide: NG_VALIDATORS,\n                            useExisting: NgxMaskDirective,\n                            multi: true,\n                        },\n                        NgxMaskService,\n                    ],\n                    exportAs: 'mask,ngxMask',\n                }]\n        }], propDecorators: { onPaste: [{\n                type: HostListener,\n                args: ['paste']\n            }], onFocus: [{\n                type: HostListener,\n                args: ['focus', ['$event']]\n            }], onModelChange: [{\n                type: HostListener,\n                args: ['ngModelChange', ['$event']]\n            }], onInput: [{\n                type: HostListener,\n                args: ['input', ['$event']]\n            }], onCompositionStart: [{\n                type: HostListener,\n                args: ['compositionstart', ['$event']]\n            }], onCompositionEnd: [{\n                type: HostListener,\n                args: ['compositionend', ['$event']]\n            }], onBlur: [{\n                type: HostListener,\n                args: ['blur', ['$event']]\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\n\nclass NgxMaskPipe {\n    defaultOptions = inject(NGX_MASK_CONFIG);\n    _maskService = inject(NgxMaskService);\n    _maskExpressionArray = signal([]);\n    _mask = signal('');\n    transform(value, mask, { patterns, ...config } = {}) {\n        let processedValue = value;\n        const currentConfig = {\n            maskExpression: mask,\n            ...this.defaultOptions,\n            ...config,\n            patterns: {\n                ...this._maskService.patterns,\n                ...patterns,\n            },\n        };\n        Object.entries(currentConfig).forEach(([key, val]) => {\n            this._maskService[key] = val;\n        });\n        if (mask.includes('||')) {\n            const maskParts = mask.split('||');\n            if (maskParts.length > 1) {\n                this._maskExpressionArray.set(maskParts.sort((a, b) => a.length - b.length));\n                this._setMask(processedValue);\n                return this._maskService.applyMask(`${processedValue}`, this._mask());\n            }\n            else {\n                this._maskExpressionArray.set([]);\n                return this._maskService.applyMask(`${processedValue}`, this._mask());\n            }\n        }\n        if (mask.includes(MaskExpression.CURLY_BRACKETS_LEFT)) {\n            return this._maskService.applyMask(`${processedValue}`, this._maskService._repeatPatternSymbols(mask));\n        }\n        if (mask.startsWith(MaskExpression.SEPARATOR)) {\n            if (config.decimalMarker) {\n                this._maskService.decimalMarker = config.decimalMarker;\n            }\n            if (config.thousandSeparator) {\n                this._maskService.thousandSeparator = config.thousandSeparator;\n            }\n            if (config.leadZero) {\n                this._maskService.leadZero = config.leadZero;\n            }\n            processedValue = String(processedValue);\n            const localeDecimalMarker = this._maskService.currentLocaleDecimalMarker();\n            if (!Array.isArray(this._maskService.decimalMarker)) {\n                processedValue =\n                    this._maskService.decimalMarker !== localeDecimalMarker\n                        ? processedValue.replace(localeDecimalMarker, this._maskService.decimalMarker)\n                        : processedValue;\n            }\n            if (this._maskService.leadZero &&\n                processedValue &&\n                this._maskService.dropSpecialCharacters !== false) {\n                processedValue = this._maskService._checkPrecision(mask, processedValue);\n            }\n            if (this._maskService.decimalMarker === MaskExpression.COMMA) {\n                processedValue = processedValue.replace(MaskExpression.DOT, MaskExpression.COMMA);\n            }\n            this._maskService.isNumberValue = true;\n        }\n        if (processedValue === null || typeof processedValue === 'undefined') {\n            return this._maskService.applyMask('', mask);\n        }\n        return this._maskService.applyMask(`${processedValue}`, mask);\n    }\n    _setMask(value) {\n        if (this._maskExpressionArray().length > 0) {\n            this._maskExpressionArray().some((mask) => {\n                const test = this._maskService.removeMask(value)?.length <=\n                    this._maskService.removeMask(mask)?.length;\n                if (value && test) {\n                    this._mask.set(mask);\n                    return test;\n                }\n                else {\n                    const expression = this._maskExpressionArray()[this._maskExpressionArray.length - 1] ??\n                        MaskExpression.EMPTY_STRING;\n                    this._mask.set(expression);\n                }\n            });\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.4\", ngImport: i0, type: NgxMaskPipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });\n    static ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"14.0.0\", version: \"19.0.4\", ngImport: i0, type: NgxMaskPipe, isStandalone: true, name: \"mask\" });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.4\", ngImport: i0, type: NgxMaskPipe, decorators: [{\n            type: Pipe,\n            args: [{\n                    name: 'mask',\n                    pure: true,\n                    standalone: true,\n                }]\n        }] });\n\nexport { INITIAL_CONFIG, NEW_CONFIG, NGX_MASK_CONFIG, NgxMaskDirective, NgxMaskPipe, NgxMaskService, initialConfig, provideEnvironmentNgxMask, provideNgxMask, timeMasks, withoutValidation };\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}"],"names":["i0","InjectionToken","EventEmitter","inject","Injectable","ElementRef","Renderer2","makeEnvironmentProviders","input","output","signal","Directive","HostListener","Pipe","DOCUMENT","NG_VALUE_ACCESSOR","NG_VALIDATORS","MaskExpression","NGX_MASK_CONFIG","NEW_CONFIG","INITIAL_CONFIG","initialConfig","suffix","prefix","thousandSeparator","decimalMarker","clearIfNotMatch","showMaskTyped","instantPrefix","placeHolderCharacter","dropSpecialCharacters","hiddenInput","shownMaskExpression","separatorLimit","allowNegativeNumbers","validation","specialCharacters","leadZeroDateTime","apm","leadZero","keepCharacterPositions","triggerOnMaskChange","inputTransformFn","value","outputTransformFn","maskFilled","patterns","pattern","RegExp","optional","X","symbol","A","S","U","L","d","m","M","H","h","s","timeMasks","HOURS_MINUTES_SECONDS","HOURS_MINUTES","MINUTES_SECONDS","withoutValidation","PERCENT","HOURS_HOUR","SECONDS","MINUTES","SEPARATOR","DAYS_MONTHS_YEARS","DAYS_MONTHS","DAYS","MONTHS","NgxMaskApplierService","_config","customPattern","_shift","Set","plusOnePosition","maskExpression","actualValue","showKeepCharacterExp","deletedSpecialCharacter","ipError","cpfCnpjError","applyMask","inputValue","position","justPasted","backspaced","cb","EMPTY_STRING","cursor","result","multi","backspaceShift","shift","stepBack","processedValue","processedPosition","slice","length","checkAndRemoveSuffix","inputArray","toString","split","MINUS","IP","valuesIP","DOT","_validIP","arr","i","match","push","CPF_CNPJ","startsWith","_stripToDecimal","precision","getPrecision","checkInputPrecision","indexOf","percentage","substring","base","_splitPercentZero","Array","isArray","includes","find","dm","decimalMarkerIndex","nonZeroIndex","_findFirstNonZeroAndDecimalIndex","zeroIndexMinus","zeroIndexNumberZero","NUMBER_ZERO","zeroIndexDecimalMarker","firstIndexDecimalMarker","COMMA","thousandSeparatorCharEscaped","_charToRegExpExpression","invalidChars","replace","marker","invalidCharRegexp","strForSep","_formatWithSeparators","commaShift","shiftStep","backspacedDecimalMarkerWithSeparatorLimit","add","clear","inputSymbol","symbolStarInPattern","SYMBOL_STAR","_checkSymbolMask","SYMBOL_QUESTION","HOURS","Number","_shiftStep","HOUR","MINUTE","SECOND","daysCount","inputValueCursor","inputValueCursorPlusOne","inputValueCursorPlusTwo","inputValueCursorMinusOne","inputValueCursorMinusTwo","inputValueSliceMinusThreeMinusOne","inputValueSliceMinusOnePlusOne","inputValueSliceCursorPlusTwo","inputValueSliceMinusTwoCursor","DAY","maskStartWithMonth","startWithMonthInput","MONTH","monthsCount","withoutDays","specialChart","day1monthInput","day2monthInput","day2monthInputDot","day1monthPaste","day2monthPaste","NUMBER_NINE","_findSpecialChar","newPosition","has","actualShift","onlySpecial","every","char","res","isSpecialCharacterMaskFirstSymbol","join","_findDropSpecialChar","val","maskSymbol","test","str","thousandSeparatorChar","decimalChars","x","decimalChar","regExp","map","v","decimals","rgx","sanitizedStr","isNaN","Infinity","substr","processedInputValue","processedDecimalMarker","precisionRegEx","precisionMatch","precisionMatchLength","diff","_compareOrIncludes","filter","idx","isDecimalMarker","charsToEscape","comparedValue","excludedValue","some","index","decimalIndex","emptyOrMinus","parsedValue","parseInt","integerPart","decimalPart","integerString","decimal","inputString","ɵfac","NgxMaskApplierService_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","NgxMaskService","isNumberValue","maskIsShown","selStart","selEnd","maskChanged","maskExpressionArray","previousValue","currentValue","writingValue","_emitValue","_start","_end","onChange","_","_elementRef","document","_renderer","showMaskInInput","HASH","formControlResult","getSymbol","newInputValue","actualResult","concat","removeMask","splice","shiftTypedSymbols","Boolean","getActualValue","item","requestAnimationFrame","hideInput","resLen","prefNmask","countSkipedSymbol","_numberSkipedSymbols","regex","exec","applyValueChanges","formElement","nativeElement","_getActiveElement","clearIfNotMatchFn","curr","compare","maskChar","symbolToReplace","currSymbol","replaceSymbol","numberToString","String","toLocaleString","useGrouping","maximumFractionDigits","inputVal","Error","_checkForIp","_checkForCpfCnpj","formElementProperty","name","Promise","resolve","then","setProperty","checkDropSpecialCharAmount","mask","chars","_removeMask","_removeSuffix","_removePrefix","cpf","cnpj","shadowRootEl","activeElement","shadowRoot","_toNumber","_checkSymbols","num","specialCharactersForRemove","_regExpForRemove","_retrieveSeparatorValue","_checkPatternForSpace","WHITE_SPACE","_replaceDecimalMarkerToDot","markers","processedResult","separatorPrecision","_retrieveSeparatorPrecision","separatorValue","_checkPrecision","key","hasOwnProperty","patternString","maskExpretion","matcher","separatorExpression","toFixed","_repeatPatternSymbols","maskExp","reduce","accum","currVal","CURLY_BRACKETS_LEFT","CURLY_BRACKETS_RIGHT","repeatNumber","replaceWith","LETTER_S","symbols","currentLocaleDecimalMarker","ɵNgxMaskService_BaseFactory","NgxMaskService_Factory","ɵɵgetInheritedFactory","_configFactory","initConfig","configValue","Function","provideNgxMask","provide","useValue","useFactory","provideEnvironmentNgxMask","NgxMaskDirective","_maskValue","_inputValue","_position","_code","_maskExpressionArray","_justPasted","_isFocused","_isComposing","_maskService","self","onTouch","ngOnChanges","changes","firstChange","OR","set","sort","a","b","_setMask","c","previousDecimalMarker","click","_applyMask","validate","maskValue","_createValidationError","_validateTime","EMAIL_MASK","emailPattern","counterOfOpt","lengthInsideCurlyBrackets","lastIndexOf","opt","array","lastIndexArray","special","emit","onPaste","onFocus","onModelChange","onInput","e","el","target","transformedValue","type","selectionStart","prefixLength","checkSymbols","checkSpecialCharacter","selectRangeBackspace","backspaceOrDelete","BACKSPACE","DELETE","part1","part2","caretShift","DOUBLE_ZERO","_backspaceShift","specialChartMinusOne","allowFewMaskChangeMask","specialChartPlusOne","positionToApply","_getActualInputLength","setSelectionRange","console","warn","onCompositionStart","onCompositionEnd","onBlur","repeat","onClick","posStart","posEnd","selectionEnd","keyCode","focus","nextValue","specialCharactersAtTheStart","onKeyDown","code","ARROW_UP","preventDefault","ARROW_LEFT","checkSelectionOnDeletion","cursorStart","readOnly","ctrlKey","metaKey","writeValue","controlValue","_this","_asyncToGenerator","setDisabledState","disable","localeDecimalMarker","registerOnChange","fn","registerOnTouched","suffixLength","inputValueLength","Math","min","max","isDisabled","rowMaskLen","requiredMask","_areAllCharactersInEachStringSame","expression","cleanMask","check","character","indexMask","charAt","removeSpecialCharacters","ch","processedArr","uniqueCharacters","size","NgxMaskDirective_Factory","ɵdir","ɵɵdefineDirective","selectors","hostBindings","NgxMaskDirective_HostBindings","rf","ctx","ɵɵlistener","NgxMaskDirective_paste_HostBindingHandler","NgxMaskDirective_focus_HostBindingHandler","$event","NgxMaskDirective_ngModelChange_HostBindingHandler","NgxMaskDirective_input_HostBindingHandler","NgxMaskDirective_compositionstart_HostBindingHandler","NgxMaskDirective_compositionend_HostBindingHandler","NgxMaskDirective_blur_HostBindingHandler","NgxMaskDirective_click_HostBindingHandler","NgxMaskDirective_keydown_HostBindingHandler","inputs","ɵɵInputFlags","SignalBased","outputs","exportAs","standalone","features","ɵɵProvidersFeature","useExisting","ɵɵNgOnChangesFeature","NgxMaskPipe","defaultOptions","_mask","transform","config","currentConfig","Object","entries","forEach","maskParts","NgxMaskPipe_Factory","ɵpipe","ɵɵdefinePipe","pure"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1]}