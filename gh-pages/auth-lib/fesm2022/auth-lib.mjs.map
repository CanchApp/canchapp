{"version":3,"file":"auth-lib.mjs","sources":["../../../projects/libs/auth-lib/src/lib/constants.ts","../../../projects/libs/auth-lib/src/lib/auth-lib.service.ts","../../../projects/libs/auth-lib/src/lib/auth-lib.component.ts","../../../projects/libs/auth-lib/src/lib/auth.interceptor.ts","../../../projects/libs/auth-lib/src/lib/auth-lib.module.ts","../../../projects/libs/auth-lib/src/public-api.ts","../../../projects/libs/auth-lib/src/auth-lib.ts"],"sourcesContent":["export const AUTH_TOKEN_KEY = 'TKCANCHAPP';\r\nexport const PRV_AUTH_TOKEN_KEY = 'PRV_TKCANCHAPP';\r\nexport const COMPANIES_KEY = 'COMPANIES';","import { Injectable } from '@angular/core';\r\nimport { AUTH_TOKEN_KEY, PRV_AUTH_TOKEN_KEY, COMPANIES_KEY } from './constants';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthLibService {\r\n  constructor() {}\r\n\r\n  public getToken(): string {\r\n    return localStorage.getItem(AUTH_TOKEN_KEY) ?? localStorage.getItem(PRV_AUTH_TOKEN_KEY)!;\r\n  };\r\n\r\n  public setToken(token: string, isProvisional: boolean): void {\r\n    if (isProvisional) {\r\n      this.removeToken();\r\n      localStorage.setItem(PRV_AUTH_TOKEN_KEY, token);\r\n    } else {\r\n      this.removePrvToken();\r\n      localStorage.setItem(AUTH_TOKEN_KEY, token);\r\n    }\r\n  }\r\n\r\n  public removeToken(): void {\r\n    localStorage.removeItem(AUTH_TOKEN_KEY);\r\n  }\r\n\r\n  public removePrvToken(): void {\r\n    localStorage.removeItem(PRV_AUTH_TOKEN_KEY);\r\n  }\r\n\r\n  public logOut(): void {\r\n    this.removeToken();\r\n    this.removePrvToken();\r\n  }\r\n\r\n  public isAuthenticated(): boolean {\r\n    // Verifica si el token existe en localStorage\r\n    return !!localStorage.getItem(AUTH_TOKEN_KEY) && !localStorage.getItem(PRV_AUTH_TOKEN_KEY);\r\n  }\r\n\r\n  public isAuthenticatedMultilogin(): boolean {\r\n    // Verifica si el token provisional existe en localStorage\r\n    return !localStorage.getItem(AUTH_TOKEN_KEY) && !!localStorage.getItem(PRV_AUTH_TOKEN_KEY);\r\n  }\r\n\r\n  public getCompanies<T>(): T {\r\n    return JSON.parse(localStorage.getItem(COMPANIES_KEY)!) as T;\r\n  }\r\n\r\n  public setCompanies<T>(companies: T): void {\r\n    localStorage.setItem(COMPANIES_KEY, JSON.stringify(companies));\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'lib-auth-lib',\r\n  standalone: true,\r\n  imports: [],\r\n  template: `\r\n    <p>\r\n      auth-lib works!\r\n    </p>\r\n  `,\r\n  styles: ``\r\n})\r\nexport class AuthLibComponent {\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthLibService } from './auth-lib.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(\r\n    private readonly authLibService: AuthLibService\r\n  ){}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    const token = this.authLibService.getToken();\r\n\r\n    let authReq = req;\r\n    if (token) {\r\n      authReq = req.clone({\r\n        setHeaders: {\r\n          Authorization: `Bearer ${token}`\r\n        }\r\n      });\r\n    }\r\n\r\n    return next.handle(authReq);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { AuthInterceptor } from './auth.interceptor';\r\n\r\n@NgModule({\r\n  providers: [\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: AuthInterceptor,\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class AuthLibModule { }\r\n","/*\r\n * Public API Surface of auth-lib\r\n */\r\n\r\nexport * from './lib/auth-lib.service';\r\nexport * from './lib/auth-lib.component';\r\nexport * from './lib/auth-lib.module';\r\n\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["i1.AuthLibService"],"mappings":"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"}